{
  "version": 3,
  "sources": ["../../long/src/long.js", "../../../../tfjs-core/src/ops/browser.ts", "../../../../tfjs-core/src/backends/backend.ts", "../../../../tfjs-core/src/util_base.ts", "../../../../tfjs-core/src/environment.ts", "../../../../tfjs-core/src/global_util.ts", "../../../../tfjs-core/src/kernel_names.ts", "../../../../tfjs-core/src/log.ts", "../../../../tfjs-core/src/kernel_registry.ts", "../../../../tfjs-core/src/util.ts", "../../../../tfjs-core/src/platforms/is_typed_array_browser.ts", "../../../../tfjs-core/src/hash_util.ts", "../../../../tfjs-core/src/profiler.ts", "../../../../tfjs-core/src/tape.ts", "../../../../tfjs-core/src/tensor_format.ts", "../../../../tfjs-core/src/tensor.ts", "../../../../tfjs-core/src/tensor_util.ts", "../../../../tfjs-core/src/types.ts", "../../../../tfjs-core/src/engine.ts", "../../../../tfjs-core/src/tensor_util_env.ts", "../../../../tfjs-core/src/ops/operation.ts", "../../../../tfjs-core/src/ops/cast.ts", "../../../../tfjs-core/src/ops/tensor_ops_util.ts", "../../../../tfjs-core/src/ops/tensor3d.ts"],
  "sourcesContent": ["module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {env} from '../environment';\nimport {Draw, DrawAttrs, DrawInputs, FromPixels, FromPixelsAttrs, FromPixelsInputs} from '../kernel_names';\nimport {getKernel, NamedAttrMap} from '../kernel_registry';\nimport {Tensor, Tensor2D, Tensor3D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {DrawOptions, ImageOptions, PixelData, TensorLike} from '../types';\n\nimport {cast} from './cast';\nimport {op} from './operation';\nimport {tensor3d} from './tensor3d';\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\nlet hasToPixelsWarned = false;\n\n/**\n * Creates a `tf.Tensor` from an image.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * tf.browser.fromPixels(image).print();\n * ```\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @returns A Tensor3D with the shape `[height, width, numChannels]`.\n *\n * Note: fromPixels can be lossy in some cases, same image may result in\n * slightly different tensor values, if rendered by different rendering\n * engines. This means that results from different browsers, or even same\n * browser with CPU and GPU rendering engines can be different. See discussion\n * in details:\n * https://github.com/tensorflow/tfjs/issues/5482\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\nfunction fromPixels_(\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap,\n    numChannels = 3): Tensor3D {\n  // Sanity checks.\n  if (numChannels > 4) {\n    throw new Error(\n        'Cannot construct Tensor with more than 4 channels from pixels.');\n  }\n  if (pixels == null) {\n    throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n  }\n  let isPixelData = false;\n  let isImageData = false;\n  let isVideo = false;\n  let isImage = false;\n  let isCanvasLike = false;\n  let isImageBitmap = false;\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    isPixelData = true;\n  } else if (\n      typeof (ImageData) !== 'undefined' && pixels instanceof ImageData) {\n    isImageData = true;\n  } else if (\n      typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement) {\n    isVideo = true;\n  } else if (\n      typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement) {\n    isImage = true;\n    // tslint:disable-next-line: no-any\n  } else if ((pixels as any).getContext != null) {\n    isCanvasLike = true;\n  } else if (\n      typeof (ImageBitmap) !== 'undefined' && pixels instanceof ImageBitmap) {\n    isImageBitmap = true;\n  } else {\n    throw new Error(\n        'pixels passed to tf.browser.fromPixels() must be either an ' +\n        `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` +\n        `in browser, or OffscreenCanvas, ImageData in webworker` +\n        ` or {data: Uint32Array, width: number, height: number}, ` +\n        `but was ${(pixels as {}).constructor.name}`);\n  }\n  // If the current backend has 'FromPixels' registered, it has a more\n  // efficient way of handling pixel uploads, so we call that.\n  const kernel = getKernel(FromPixels, ENGINE.backendName);\n  if (kernel != null) {\n    const inputs: FromPixelsInputs = {pixels};\n    const attrs: FromPixelsAttrs = {numChannels};\n    return ENGINE.runKernel(\n        FromPixels, inputs as unknown as NamedTensorMap,\n        attrs as unknown as NamedAttrMap);\n  }\n\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n  let vals: Uint8ClampedArray|Uint8Array;\n\n  if (isCanvasLike) {\n    vals =\n        // tslint:disable-next-line:no-any\n        (pixels as any).getContext('2d').getImageData(0, 0, width, height).data;\n  } else if (isImageData || isPixelData) {\n    vals = (pixels as PixelData | ImageData).data;\n  } else if (isImage || isVideo || isImageBitmap) {\n    if (fromPixels2DContext == null) {\n      if (typeof document === 'undefined') {\n        if (typeof OffscreenCanvas !== 'undefined' &&\n            typeof OffscreenCanvasRenderingContext2D !== 'undefined') {\n          // @ts-ignore\n          fromPixels2DContext = new OffscreenCanvas(1, 1).getContext('2d');\n        } else {\n          throw new Error(\n              'Cannot parse input in current context. ' +\n              'Reason: OffscreenCanvas Context2D rendering is not supported.');\n        }\n      } else {\n        fromPixels2DContext = document.createElement('canvas').getContext(\n            '2d', {willReadFrequently: true});\n      }\n    }\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement, 0, 0, width, height);\n    vals = fromPixels2DContext.getImageData(0, 0, width, height).data;\n  }\n  let values: Int32Array;\n  if (numChannels === 4) {\n    values = new Int32Array(vals);\n  } else {\n    const numPixels = width * height;\n    values = new Int32Array(numPixels * numChannels);\n    for (let i = 0; i < numPixels; i++) {\n      for (let channel = 0; channel < numChannels; ++channel) {\n        values[i * numChannels + channel] = vals[i * 4 + channel];\n      }\n    }\n  }\n  const outShape: [number, number, number] = [height, width, numChannels];\n  return tensor3d(values, outShape, 'int32');\n}\n\n// Helper functions for |fromPixelsAsync| to check whether the input can\n// be wrapped into imageBitmap.\nfunction isPixelData(pixels: PixelData|ImageData|HTMLImageElement|\n                     HTMLCanvasElement|HTMLVideoElement|\n                     ImageBitmap): pixels is PixelData {\n  return (pixels != null) && ((pixels as PixelData).data instanceof Uint8Array);\n}\n\nfunction isImageBitmapFullySupported() {\n  return typeof window !== 'undefined' &&\n      typeof (ImageBitmap) !== 'undefined' &&\n      window.hasOwnProperty('createImageBitmap');\n}\n\nfunction isNonEmptyPixels(pixels: PixelData|ImageData|HTMLImageElement|\n                          HTMLCanvasElement|HTMLVideoElement|ImageBitmap) {\n  return pixels != null && pixels.width !== 0 && pixels.height !== 0;\n}\n\nfunction canWrapPixelsToImageBitmap(pixels: PixelData|ImageData|\n                                    HTMLImageElement|HTMLCanvasElement|\n                                    HTMLVideoElement|ImageBitmap) {\n  return isImageBitmapFullySupported() && !(pixels instanceof ImageBitmap) &&\n      isNonEmptyPixels(pixels) && !isPixelData(pixels);\n}\n\n/**\n * Creates a `tf.Tensor` from an image in async way.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * (await tf.browser.fromPixelsAsync(image)).print();\n * ```\n * This API is the async version of fromPixels. The API will first\n * check |WRAP_TO_IMAGEBITMAP| flag, and try to wrap the input to\n * imageBitmap if the flag is set to true.\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\nexport async function fromPixelsAsync(\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap,\n    numChannels = 3) {\n  let inputs: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      HTMLVideoElement|ImageBitmap = null;\n\n  // Check whether the backend needs to wrap |pixels| to imageBitmap and\n  // whether |pixels| can be wrapped to imageBitmap.\n  if (env().getBool('WRAP_TO_IMAGEBITMAP') &&\n      canWrapPixelsToImageBitmap(pixels)) {\n    // Force the imageBitmap creation to not do any premultiply alpha\n    // ops.\n    let imageBitmap;\n\n    try {\n      // wrap in try-catch block, because createImageBitmap may not work\n      // properly in some browsers, e.g.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1335594\n      // tslint:disable-next-line: no-any\n      imageBitmap = await (createImageBitmap as any)(\n          pixels as ImageBitmapSource, {premultiplyAlpha: 'none'});\n    } catch (e) {\n      imageBitmap = null;\n    }\n\n    // createImageBitmap will clip the source size.\n    // In some cases, the input will have larger size than its content.\n    // E.g. new Image(10, 10) but with 1 x 1 content. Using\n    // createImageBitmap will clip the size from 10 x 10 to 1 x 1, which\n    // is not correct. We should avoid wrapping such resouce to\n    // imageBitmap.\n    if (imageBitmap != null && imageBitmap.width === pixels.width &&\n        imageBitmap.height === pixels.height) {\n      inputs = imageBitmap;\n    } else {\n      inputs = pixels;\n    }\n  } else {\n    inputs = pixels;\n  }\n\n  return fromPixels_(inputs, numChannels);\n}\n\nfunction validateImgTensor(img: Tensor2D|Tensor3D) {\n  if (img.rank !== 2 && img.rank !== 3) {\n    throw new Error(\n        `toPixels only supports rank 2 or 3 tensors, got rank ${img.rank}.`);\n  }\n  const depth = img.rank === 2 ? 1 : img.shape[2];\n\n  if (depth > 4 || depth === 2) {\n    throw new Error(\n        `toPixels only supports depth of size ` +\n        `1, 3 or 4 but got ${depth}`);\n  }\n\n  if (img.dtype !== 'float32' && img.dtype !== 'int32') {\n    throw new Error(\n        `Unsupported type for toPixels: ${img.dtype}.` +\n        ` Please use float32 or int32 tensors.`);\n  }\n}\n\nfunction validateImageOptions(imageOptions: ImageOptions) {\n  const alpha = imageOptions ?.alpha || 1;\n  if (alpha > 1 || alpha < 0) {\n    throw new Error(`Alpha value ${alpha} is suppoed to be in range [0 - 1].`);\n  }\n}\n\n/**\n * Draws a `tf.Tensor` of pixel values to a byte array or optionally a\n * canvas.\n *\n * When the dtype of the input is 'float32', we assume values in the range\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\n * [0-255].\n *\n * Returns a promise that resolves when the canvas has been drawn to.\n *\n * @param img A rank-2 tensor with shape `[height, width]`, or a rank-3 tensor\n * of shape `[height, width, numChannels]`. If rank-2, draws grayscale. If\n * rank-3, must have depth of 1, 3 or 4. When depth of 1, draws\n * grayscale. When depth of 3, we draw with the first three components of\n * the depth dimension corresponding to r, g, b and alpha = 1. When depth of\n * 4, all four components of the depth dimension correspond to r, g, b, a.\n * @param canvas The canvas to draw to.\n *\n * @doc {heading: 'Browser', namespace: 'browser'}\n */\nexport async function toPixels(\n    img: Tensor2D|Tensor3D|TensorLike,\n    canvas?: HTMLCanvasElement): Promise<Uint8ClampedArray> {\n  let $img = convertToTensor(img, 'img', 'toPixels');\n  if (!(img instanceof Tensor)) {\n    // Assume int32 if user passed a native array.\n    const originalImgTensor = $img;\n    $img = cast(originalImgTensor, 'int32');\n    originalImgTensor.dispose();\n  }\n  validateImgTensor($img);\n\n  const [height, width] = $img.shape.slice(0, 2);\n  const depth = $img.rank === 2 ? 1 : $img.shape[2];\n  const data = await $img.data();\n  const multiplier = $img.dtype === 'float32' ? 255 : 1;\n  const bytes = new Uint8ClampedArray(width * height * 4);\n\n  for (let i = 0; i < height * width; ++i) {\n    const rgba = [0, 0, 0, 255];\n\n    for (let d = 0; d < depth; d++) {\n      const value = data[i * depth + d];\n\n      if ($img.dtype === 'float32') {\n        if (value < 0 || value > 1) {\n          throw new Error(\n              `Tensor values for a float32 Tensor must be in the ` +\n              `range [0 - 1] but encountered ${value}.`);\n        }\n      } else if ($img.dtype === 'int32') {\n        if (value < 0 || value > 255) {\n          throw new Error(\n              `Tensor values for a int32 Tensor must be in the ` +\n              `range [0 - 255] but encountered ${value}.`);\n        }\n      }\n\n      if (depth === 1) {\n        rgba[0] = value * multiplier;\n        rgba[1] = value * multiplier;\n        rgba[2] = value * multiplier;\n      } else {\n        rgba[d] = value * multiplier;\n      }\n    }\n\n    const j = i * 4;\n    bytes[j + 0] = Math.round(rgba[0]);\n    bytes[j + 1] = Math.round(rgba[1]);\n    bytes[j + 2] = Math.round(rgba[2]);\n    bytes[j + 3] = Math.round(rgba[3]);\n  }\n\n  if (canvas != null) {\n    if (!hasToPixelsWarned) {\n      const kernel = getKernel(Draw, ENGINE.backendName);\n      if (kernel != null) {\n        console.warn(\n            'tf.browser.toPixels is not efficient to draw tensor on canvas. ' +\n            'Please try tf.browser.draw instead.');\n        hasToPixelsWarned = true;\n      }\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const imageData = new ImageData(bytes, width, height);\n    ctx.putImageData(imageData, 0, 0);\n  }\n  if ($img !== img) {\n    $img.dispose();\n  }\n  return bytes;\n}\n\n/**\n * Draws a `tf.Tensor` to a canvas.\n *\n * When the dtype of the input is 'float32', we assume values in the range\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\n * [0-255].\n *\n * @param image The tensor to draw on the canvas. Must match one of\n * these shapes:\n *   - Rank-2 with shape `[height, width`]: Drawn as grayscale.\n *   - Rank-3 with shape `[height, width, 1]`: Drawn as grayscale.\n *   - Rank-3 with shape `[height, width, 3]`: Drawn as RGB with alpha set in\n *     `imageOptions` (defaults to 1, which is opaque).\n *   - Rank-3 with shape `[height, width, 4]`: Drawn as RGBA.\n * @param canvas The canvas to draw to.\n * @param options The configuration arguments for image to be drawn and the\n *     canvas to draw to.\n *\n * @doc {heading: 'Browser', namespace: 'browser'}\n */\nexport function draw(\n    image: Tensor2D|Tensor3D|TensorLike, canvas: HTMLCanvasElement,\n    options?: DrawOptions): void {\n  let $img = convertToTensor(image, 'img', 'draw');\n  if (!(image instanceof Tensor)) {\n    // Assume int32 if user passed a native array.\n    const originalImgTensor = $img;\n    $img = cast(originalImgTensor, 'int32');\n    originalImgTensor.dispose();\n  }\n  validateImgTensor($img);\n  validateImageOptions(options?.imageOptions);\n\n  const inputs: DrawInputs = {image: $img};\n  const attrs: DrawAttrs = {canvas, options};\n  ENGINE.runKernel(\n      Draw, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const fromPixels = /* @__PURE__ */ op({fromPixels_});\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Backend, DataToGPUOptions, GPUData, Tensor} from '../tensor';\nimport {DataId} from '../tensor_info';\nimport {BackendValues, DataType, WebGLData, WebGPUData} from '../types';\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\n// Required information for all backends.\nexport interface BackendTimingInfo {\n  kernelMs: number|{error: string};\n  getExtraProfileInfo?(): string;  // a field for additional timing information\n                                   // e.g. packing / unpacking for WebGL backend\n}\n\nexport interface TensorStorage {\n  read(dataId: DataId): Promise<BackendValues>;\n  readSync(dataId: DataId): BackendValues;\n  disposeData(dataId: DataId, force?: boolean): boolean;\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId;\n  move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void;\n  memory(): {unreliable: boolean;};  // Backend-specific information.\n  /** Returns number of data ids currently in the storage. */\n  numDataIds(): number;\n  refCount(dataId: DataId): number;\n}\n\n/** Convenient class for storing tensor-related data. */\nexport class DataStorage<T> {\n  private data = new WeakMap<DataId, T>();\n  private dataIdsCount = 0;\n\n  constructor(private backend: KernelBackend, private dataMover: DataMover) {}\n\n  get(dataId: DataId) {\n    if (!this.data.has(dataId)) {\n      this.dataMover.moveData(this.backend, dataId);\n    }\n    return this.data.get(dataId);\n  }\n\n  set(dataId: DataId, value: T): void {\n    this.dataIdsCount++;\n    this.data.set(dataId, value);\n  }\n\n  has(dataId: DataId): boolean {\n    return this.data.has(dataId);\n  }\n\n  delete(dataId: DataId): boolean {\n    this.dataIdsCount--;\n    return this.data.delete(dataId);\n  }\n\n  numDataIds(): number {\n    return this.dataIdsCount;\n  }\n}\n\nexport interface DataMover {\n  /**\n   * To be called by backends whenever they see a dataId that they don't own.\n   * Upon calling this method, the mover will fetch the tensor from another\n   * backend and register it with the current active backend.\n   */\n  moveData(backend: KernelBackend, dataId: DataId): void;\n}\n\nexport interface BackendTimer {\n  // check if backend timer is available\n  timerAvailable(): boolean;\n  time(f: () => void): Promise<BackendTimingInfo>;\n}\n\n/**\n * The interface that defines the kernels that should be implemented when\n * adding a new backend. New backends don't need to implement every one of the\n * methods, this can be done gradually (throw an error for unimplemented\n * methods).\n */\nexport class KernelBackend implements TensorStorage, Backend, BackendTimer {\n  refCount(dataId: DataId): number {\n    return notYetImplemented('refCount');\n  }\n  incRef(dataId: DataId): void {\n    return notYetImplemented('incRef');\n  }\n  timerAvailable(): boolean {\n    return true;\n  }\n  time(f: () => void): Promise<BackendTimingInfo> {\n    return notYetImplemented('time');\n  }\n  read(dataId: object): Promise<BackendValues> {\n    return notYetImplemented('read');\n  }\n  readSync(dataId: object): BackendValues {\n    return notYetImplemented('readSync');\n  }\n  readToGPU(dataId: object, options?: DataToGPUOptions): GPUData {\n    return notYetImplemented('readToGPU');\n  }\n  numDataIds(): number {\n    return notYetImplemented('numDataIds');\n  }\n  disposeData(dataId: object, force?: boolean): boolean {\n    return notYetImplemented('disposeData');\n  }\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    return notYetImplemented('write');\n  }\n  move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    return notYetImplemented('move');\n  }\n\n  createTensorFromGPUData(\n      values: WebGLData|WebGPUData, shape: number[], dtype: DataType): Tensor {\n    return notYetImplemented('createTensorFromGPUData');\n  }\n\n  memory(): {unreliable: boolean; reasons?: string[]} {\n    return notYetImplemented('memory');\n  }\n  /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\n  floatPrecision(): 16|32 {\n    return notYetImplemented('floatPrecision');\n  }\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n  dispose(): void {\n    return notYetImplemented('dispose');\n  }\n}\n\nfunction notYetImplemented(kernelName: string): never {\n  throw new Error(\n      `'${kernelName}' not yet implemented or not found in the registry. ` +\n      `This kernel may not be supported by the tfjs backend you have chosen`);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, DataTypeMap, FlatVector, NumericDataType, TensorLike, TypedArray, WebGLData, WebGPUData} from './types';\n\n/**\n * Shuffles the array in-place using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1, 2, 3, 4, 5];\n * tf.util.shuffle(a);\n * console.log(a);\n * ```\n *\n * @param array The array to shuffle in-place.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\nexport function shuffle(array: any[]|Uint32Array|Int32Array|\n                        Float32Array): void {\n  let counter = array.length;\n  let index = 0;\n  // While there are elements in the array\n  while (counter > 0) {\n    // Pick a random index\n    index = (Math.random() * counter) | 0;\n    // Decrease counter by 1\n    counter--;\n    // And swap the last element with it\n    swap(array, counter, index);\n  }\n}\n\n/**\n * Shuffles two arrays in-place the same way using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1,2,3,4,5];\n * const b = [11,22,33,44,55];\n * tf.util.shuffleCombo(a, b);\n * console.log(a, b);\n * ```\n *\n * @param array The first array to shuffle in-place.\n * @param array2 The second array to shuffle in-place with the same permutation\n *     as the first array.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function shuffleCombo(\n    // tslint:disable-next-line:no-any\n    array: any[]|Uint32Array|Int32Array|Float32Array,\n    // tslint:disable-next-line:no-any\n    array2: any[]|Uint32Array|Int32Array|Float32Array): void {\n  if (array.length !== array2.length) {\n    throw new Error(\n        `Array sizes must match to be shuffled together ` +\n        `First array length was ${array.length}` +\n        `Second array length was ${array2.length}`);\n  }\n  let counter = array.length;\n  let index = 0;\n  // While there are elements in the array\n  while (counter > 0) {\n    // Pick a random index\n    index = (Math.random() * counter) | 0;\n    // Decrease counter by 1\n    counter--;\n    // And swap the last element of each array with it\n    swap(array, counter, index);\n    swap(array2, counter, index);\n  }\n}\n\n/** Clamps a value to a specified range. */\nexport function clamp(min: number, x: number, max: number): number {\n  return Math.max(min, Math.min(x, max));\n}\n\nexport function nearestLargerEven(val: number): number {\n  return val % 2 === 0 ? val : val + 1;\n}\n\nexport function swap<T>(\n    object: {[index: number]: T}, left: number, right: number) {\n  const temp = object[left];\n  object[left] = object[right];\n  object[right] = temp;\n}\n\nexport function sum(arr: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n/**\n * Returns a sample from a uniform [a, b) distribution.\n *\n * @param a The minimum support (inclusive).\n * @param b The maximum support (exclusive).\n * @return A pseudorandom number on the half-open interval [a,b).\n */\nexport function randUniform(a: number, b: number) {\n  const r = Math.random();\n  return (b * r) + (1 - r) * a;\n}\n\n/** Returns the squared Euclidean distance between two vectors. */\nexport function distSquared(a: FlatVector, b: FlatVector): number {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    const diff = Number(a[i]) - Number(b[i]);\n    result += diff * diff;\n  }\n  return result;\n}\n\n/**\n * Asserts that the expression is true. Otherwise throws an error with the\n * provided message.\n *\n * ```js\n * const x = 2;\n * tf.util.assert(x === 2, 'x is not 2');\n * ```\n *\n * @param expr The expression to assert (as a boolean).\n * @param msg A function that returns the message to report when throwing an\n *     error. We use a function for performance reasons.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport function assertShapesMatch(\n    shapeA: number[], shapeB: number[], errorMessagePrefix = ''): void {\n  assert(\n      arraysEqual(shapeA, shapeB),\n      () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\n\nexport function assertNonNull(a: TensorLike): void {\n  assert(\n      a != null,\n      () => `The input to the tensor constructor must be a non-null value.`);\n}\n\n/**\n * Returns the size (number of elements) of the tensor given its shape.\n *\n * ```js\n * const shape = [3, 4, 2];\n * const size = tf.util.sizeFromShape(shape);\n * console.log(size);\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\n\nexport function isScalarShape(shape: number[]): boolean {\n  return shape.length === 0;\n}\n\nexport function arraysEqualWithNull(n1: number[], n2: number[]) {\n  if (n1 === n2) {\n    return true;\n  }\n\n  if (n1 == null || n2 == null) {\n    return false;\n  }\n\n  if (n1.length !== n2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== null && n2[i] !== null && n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function arraysEqual(n1: FlatVector, n2: FlatVector) {\n  if (n1 === n2) {\n    return true;\n  }\n  if (n1 == null || n2 == null) {\n    return false;\n  }\n\n  if (n1.length !== n2.length) {\n    return false;\n  }\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\n\nexport function tanh(x: number): number {\n  // tslint:disable-next-line:no-any\n  if ((Math as any).tanh != null) {\n    // tslint:disable-next-line:no-any\n    return (Math as any).tanh(x);\n  }\n  if (x === Infinity) {\n    return 1;\n  } else if (x === -Infinity) {\n    return -1;\n  } else {\n    const e2x = Math.exp(2 * x);\n    return (e2x - 1) / (e2x + 1);\n  }\n}\n\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\n\n/**\n * Creates a new array with randomized indices to a given quantity.\n *\n * ```js\n * const randomTen = tf.util.createShuffledIndices(10);\n * console.log(randomTen);\n * ```\n *\n * @param number Quantity of how many shuffled indices to create.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function createShuffledIndices(n: number): Uint32Array {\n  const shuffledIndices = new Uint32Array(n);\n  for (let i = 0; i < n; ++i) {\n    shuffledIndices[i] = i;\n  }\n  shuffle(shuffledIndices);\n  return shuffledIndices;\n}\n\nexport function rightPad(a: string, size: number): string {\n  if (size <= a.length) {\n    return a;\n  }\n  return a + ' '.repeat(size - a.length);\n}\n\nexport function repeatedTry(\n    checkFn: () => boolean, delayFn = (counter: number) => 0,\n    maxCounter?: number,\n    scheduleFn?: (functionRef: Function, delay: number) =>\n        void): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n\n      if (scheduleFn != null) {\n        scheduleFn(tryFn, nextBackoff);\n      } else {\n        // google3 does not allow assigning another variable to setTimeout.\n        // Don't refactor this so scheduleFn has a default value of setTimeout.\n        setTimeout(tryFn, nextBackoff);\n      }\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Given the full size of the array and a shape that may contain -1 as the\n * implicit dimension, returns the inferred shape where -1 is replaced.\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\n *\n * @param shape The shape, which may contain -1 in some dimension.\n * @param size The full size (number of elements) of the array.\n * @return The inferred shape where -1 is replaced with the inferred size.\n */\nexport function inferFromImplicitShape(\n    shape: number[], size: number): number[] {\n  let shapeProd = 1;\n  let implicitIdx = -1;\n\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] >= 0) {\n      shapeProd *= shape[i];\n    } else if (shape[i] === -1) {\n      if (implicitIdx !== -1) {\n        throw Error(\n            `Shapes can only have 1 implicit size. ` +\n            `Found -1 at dim ${implicitIdx} and dim ${i}`);\n      }\n      implicitIdx = i;\n    } else if (shape[i] < 0) {\n      throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\n    }\n  }\n\n  if (implicitIdx === -1) {\n    if (size > 0 && size !== shapeProd) {\n      throw Error(`Size(${size}) must match the product of shape ${shape}`);\n    }\n    return shape;\n  }\n\n  if (shapeProd === 0) {\n    throw Error(\n        `Cannot infer the missing size in [${shape}] when ` +\n        `there are 0 elements`);\n  }\n  if (size % shapeProd !== 0) {\n    throw Error(\n        `The implicit shape can't be a fractional number. ` +\n        `Got ${size} / ${shapeProd}`);\n  }\n\n  const newShape = shape.slice();\n  newShape[implicitIdx] = size / shapeProd;\n  return newShape;\n}\n\nexport function parseAxisParam(\n    axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () =>\n          `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(ax => isInt(ax)),\n      () => `All values in axis param must be integers but ` +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\n\n/** Reduces the shape by removing all dimensions of shape 1. */\nexport function squeezeShape(shape: number[], axis?: number[]):\n    {newShape: number[], keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ?\n      null :\n      parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(\n            `Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function getTypedArrayFromDType<D extends NumericDataType>(\n    dtype: D, size: number): DataTypeMap[D] {\n  return getArrayFromDType<D>(dtype, size);\n}\n\nexport function getArrayFromDType<D extends DataType>(\n    dtype: D, size: number): DataTypeMap[D] {\n  let values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else if (dtype === 'string') {\n    values = new Array<string>(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  return values as DataTypeMap[D];\n}\n\nexport function checkConversionForErrors<D extends DataType>(\n    vals: DataTypeMap[D]|number[], dtype: D): void {\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i] as number;\n    if (isNaN(num) || !isFinite(num)) {\n      throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\n    }\n  }\n}\n\n/** Returns true if the dtype is valid. */\nexport function isValidDtype(dtype: DataType): boolean {\n  return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' ||\n      dtype === 'int32' || dtype === 'string';\n}\n\n/**\n * Returns true if the new type can't encode the old type without loss of\n * precision.\n */\nexport function hasEncodingLoss(oldType: DataType, newType: DataType): boolean {\n  if (newType === 'complex64') {\n    return false;\n  }\n  if (newType === 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n  if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n  if (newType === 'bool' && oldType === 'bool') {\n    return false;\n  }\n  return true;\n}\n\nexport function bytesPerElement(dtype: DataType): number {\n  if (dtype === 'float32' || dtype === 'int32') {\n    return 4;\n  } else if (dtype === 'complex64') {\n    return 8;\n  } else if (dtype === 'bool') {\n    return 1;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n\n/**\n * Returns the approximate number of bytes allocated in the string array - 2\n * bytes per character. Computing the exact bytes for a native string in JS\n * is not possible since it depends on the encoding of the html page that\n * serves the website.\n */\nexport function bytesFromStringArray(arr: Uint8Array[]): number {\n  if (arr == null) {\n    return 0;\n  }\n  let bytes = 0;\n  arr.forEach(x => bytes += x.length);\n  return bytes;\n}\n\n/** Returns true if the value is a string. */\nexport function isString(value: {}): value is string {\n  return typeof value === 'string' || value instanceof String;\n}\n\nexport function isBoolean(value: {}): boolean {\n  return typeof value === 'boolean';\n}\n\nexport function isNumber(value: {}): boolean {\n  return typeof value === 'number';\n}\n\nexport function inferDtype(values: TensorLike|WebGLData|WebGPUData): DataType {\n  if (Array.isArray(values)) {\n    return inferDtype(values[0]);\n  }\n  if (values instanceof Float32Array) {\n    return 'float32';\n  } else if (\n      values instanceof Int32Array || values instanceof Uint8Array ||\n      values instanceof Uint8ClampedArray) {\n    return 'int32';\n  } else if (isNumber(values)) {\n    return 'float32';\n  } else if (isString(values)) {\n    return 'string';\n  } else if (isBoolean(values)) {\n    return 'bool';\n  }\n  return 'float32';\n}\n\nexport function isFunction(f: Function) {\n  return !!(f && f.constructor && f.call && f.apply);\n}\n\nexport function nearestDivisor(size: number, start: number): number {\n  for (let i = start; i < size; ++i) {\n    if (size % i === 0) {\n      return i;\n    }\n  }\n  return size;\n}\n\nexport function computeStrides(shape: number[]): number[] {\n  const rank = shape.length;\n  if (rank < 2) {\n    return [];\n  }\n\n  // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n  // strides.\n  const strides = new Array(rank - 1);\n  strides[rank - 2] = shape[rank - 1];\n  for (let i = rank - 3; i >= 0; --i) {\n    strides[i] = strides[i + 1] * shape[i + 1];\n  }\n  return strides;\n}\n\nfunction createNestedArray(\n    offset: number, shape: number[], a: TypedArray, isComplex = false) {\n  const ret = new Array();\n  if (shape.length === 1) {\n    const d = shape[0] * (isComplex ? 2 : 1);\n    for (let i = 0; i < d; i++) {\n      ret[i] = a[offset + i];\n    }\n  } else {\n    const d = shape[0];\n    const rest = shape.slice(1);\n    const len = rest.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n    for (let i = 0; i < d; i++) {\n      ret[i] = createNestedArray(offset + i * len, rest, a, isComplex);\n    }\n  }\n  return ret;\n}\n\n// Provide a nested array of TypedArray in given shape.\nexport function toNestedArray(\n    shape: number[], a: TypedArray, isComplex = false) {\n  if (shape.length === 0) {\n    // Scalar type should return a single number.\n    return a[0];\n  }\n  const size = shape.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n  if (size === 0) {\n    // A tensor with shape zero should be turned into empty list.\n    return [];\n  }\n  if (size !== a.length) {\n    throw new Error(`[${shape}] does not match the input size ${a.length}${\n        isComplex ? ' for a complex tensor' : ''}.`);\n  }\n\n  return createNestedArray(0, shape, a, isComplex);\n}\n\nexport function convertBackendValuesAndArrayBuffer(\n    data: BackendValues|ArrayBuffer, dtype: DataType) {\n  // If is type Uint8Array[], return it directly.\n  if (Array.isArray(data)) {\n    return data;\n  }\n  if (dtype === 'float32') {\n    return data instanceof Float32Array ? data : new Float32Array(data);\n  } else if (dtype === 'int32') {\n    return data instanceof Int32Array ? data : new Int32Array(data);\n  } else if (dtype === 'bool' || dtype === 'string') {\n    return Uint8Array.from(new Int32Array(data));\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n\nexport function makeOnesTypedArray<D extends DataType>(\n    size: number, dtype: D): DataTypeMap[D] {\n  const array = makeZerosTypedArray(size, dtype);\n  for (let i = 0; i < array.length; i++) {\n    array[i] = 1;\n  }\n  return array;\n}\n\nexport function makeZerosTypedArray<D extends DataType>(\n    size: number, dtype: D): DataTypeMap[D] {\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(size) as DataTypeMap[D];\n  } else if (dtype === 'int32') {\n    return new Int32Array(size) as DataTypeMap[D];\n  } else if (dtype === 'bool') {\n    return new Uint8Array(size) as DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n\n/**\n * Make nested `TypedArray` filled with zeros.\n * @param shape The shape information for the nested array.\n * @param dtype dtype of the array element.\n */\nexport function makeZerosNestedTypedArray<D extends DataType>(\n    shape: number[], dtype: D) {\n  const size = shape.reduce((prev, curr) => prev * curr, 1);\n  if (dtype == null || dtype === 'float32') {\n    return toNestedArray(shape, new Float32Array(size));\n  } else if (dtype === 'int32') {\n    return toNestedArray(shape, new Int32Array(size));\n  } else if (dtype === 'bool') {\n    return toNestedArray(shape, new Uint8Array(size));\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n\nexport function assertNonNegativeIntegerDimensions(shape: number[]) {\n  shape.forEach(dimSize => {\n    assert(\n        Number.isInteger(dimSize) && dimSize >= 0,\n        () =>\n            `Tensor must have a shape comprised of positive integers but got ` +\n            `shape [${shape}].`);\n  });\n}\n\n/**\n * Computes flat index for a given location (multidimentionsal index) in a\n * Tensor/multidimensional array.\n *\n * @param locs Location in the tensor.\n * @param rank Rank of the tensor.\n * @param strides Tensor strides.\n */\nexport function locToIndex(\n    locs: number[], rank: number, strides: number[]): number {\n  if (rank === 0) {\n    return 0;\n  } else if (rank === 1) {\n    return locs[0];\n  }\n  let index = locs[locs.length - 1];\n  for (let i = 0; i < locs.length - 1; ++i) {\n    index += strides[i] * locs[i];\n  }\n  return index;\n}\n\n/**\n * Computes the location (multidimensional index) in a\n * tensor/multidimentional array for a given flat index.\n *\n * @param index Index in flat array.\n * @param rank Rank of tensor.\n * @param strides Strides of tensor.\n */\nexport function indexToLoc(\n    index: number, rank: number, strides: number[]): number[] {\n  if (rank === 0) {\n    return [];\n  } else if (rank === 1) {\n    return [index];\n  }\n  const locs: number[] = new Array(rank);\n  for (let i = 0; i < locs.length - 1; ++i) {\n    locs[i] = Math.floor(index / strides[i]);\n    index -= locs[i] * strides[i];\n  }\n  locs[locs.length - 1] = index;\n  return locs;\n}\n\n/**\n * This method asserts whether an object is a Promise instance.\n * @param object\n */\n// tslint:disable-next-line: no-any\nexport function isPromise(object: any): object is Promise<unknown> {\n  //  We chose to not use 'obj instanceOf Promise' for two reasons:\n  //  1. It only reliably works for es6 Promise, not other Promise\n  //  implementations.\n  //  2. It doesn't work with framework that uses zone.js. zone.js monkey\n  //  patch the async calls, so it is possible the obj (patched) is\n  //  comparing to a pre-patched Promise.\n  return object && object.then && typeof object.then === 'function';\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Platform} from './platforms/platform';\nimport {isPromise} from './util_base';\n\n// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\nconst TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n\ntype FlagValue = number|boolean|string;\ntype FlagEvaluationFn = (() => FlagValue)|(() => Promise<FlagValue>);\nexport type Flags = {\n  [featureName: string]: FlagValue\n};\nexport type FlagRegistryEntry = {\n  evaluationFn: FlagEvaluationFn;\n  setHook?: (value: FlagValue) => void;\n};\n\n/**\n * The environment contains evaluated flags as well as the registered platform.\n * This is always used as a global singleton and can be retrieved with\n * `tf.env()`.\n *\n * @doc {heading: 'Environment'}\n */\nexport class Environment {\n  private flags: Flags = {};\n  private flagRegistry: {[flagName: string]: FlagRegistryEntry} = {};\n\n  private urlFlags: Flags = {};\n\n  platformName: string;\n  platform: Platform;\n\n  // Jasmine spies on this in 'environment_test.ts'\n  getQueryParams = getQueryParams;\n\n  // tslint:disable-next-line: no-any\n  constructor(public global: any) {\n    this.populateURLFlags();\n  }\n\n  setPlatform(platformName: string, platform: Platform) {\n    if (this.platform != null) {\n      if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.warn(\n            `Platform ${this.platformName} has already been set. ` +\n            `Overwriting the platform with ${platformName}.`);\n      }\n    }\n    this.platformName = platformName;\n    this.platform = platform;\n  }\n\n  registerFlag(\n      flagName: string, evaluationFn: FlagEvaluationFn,\n      setHook?: (value: FlagValue) => void) {\n    this.flagRegistry[flagName] = {evaluationFn, setHook};\n\n    // Override the flag value from the URL. This has to happen here because\n    // the environment is initialized before flags get registered.\n    if (this.urlFlags[flagName] != null) {\n      const flagValue = this.urlFlags[flagName];\n      if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.warn(\n            `Setting feature override from URL ${flagName}: ${flagValue}.`);\n      }\n      this.set(flagName, flagValue);\n    }\n  }\n\n  async getAsync(flagName: string): Promise<FlagValue> {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    this.flags[flagName] = await this.evaluateFlag(flagName);\n    return this.flags[flagName];\n  }\n\n  get(flagName: string): FlagValue {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    const flagValue = this.evaluateFlag(flagName);\n    if (isPromise(flagValue)) {\n      throw new Error(\n          `Flag ${flagName} cannot be synchronously evaluated. ` +\n          `Please use getAsync() instead.`);\n    }\n\n    this.flags[flagName] = flagValue;\n    return this.flags[flagName];\n  }\n\n  getNumber(flagName: string): number {\n    return this.get(flagName) as number;\n  }\n\n  getBool(flagName: string): boolean {\n    return this.get(flagName) as boolean;\n  }\n\n  getString(flagName: string): string {\n    return this.get(flagName) as string;\n  }\n\n  getFlags(): Flags {\n    return this.flags;\n  }\n  // For backwards compatibility.\n  get features(): Flags {\n    return this.flags;\n  }\n\n  set(flagName: string, value: FlagValue): void {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(\n          `Cannot set flag ${flagName} as it has not been registered.`);\n    }\n    this.flags[flagName] = value;\n    if (this.flagRegistry[flagName].setHook != null) {\n      this.flagRegistry[flagName].setHook(value);\n    }\n  }\n\n  private evaluateFlag(flagName: string): FlagValue|Promise<FlagValue> {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(\n          `Cannot evaluate flag '${flagName}': no evaluation function found.`);\n    }\n    return this.flagRegistry[flagName].evaluationFn();\n  }\n\n  setFlags(flags: Flags) {\n    this.flags = Object.assign({}, flags);\n  }\n\n  reset() {\n    this.flags = {};\n    this.urlFlags = {};\n    this.populateURLFlags();\n  }\n\n  private populateURLFlags(): void {\n    if (typeof this.global === 'undefined' ||\n        typeof this.global.location === 'undefined' ||\n        typeof this.global.location.search === 'undefined') {\n      return;\n    }\n\n    const urlParams = this.getQueryParams(this.global.location.search);\n    if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n      const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n      keyValues.forEach(keyValue => {\n        const [key, value] = keyValue.split(':') as [string, string];\n        this.urlFlags[key] = parseValue(key, value);\n      });\n    }\n  }\n}\n\nexport function getQueryParams(queryString: string): {[key: string]: string} {\n  const params = {};\n  queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {\n    decodeParam(params, t[0], t[1]);\n    return t.join('=');\n  });\n  return params;\n}\n\nfunction decodeParam(\n    params: {[key: string]: string}, name: string, value?: string) {\n  params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\n\nfunction parseValue(flagName: string, value: string): FlagValue {\n  const lowerCaseValue = value.toLowerCase();\n  if (lowerCaseValue === 'true' || lowerCaseValue === 'false') {\n    return lowerCaseValue === 'true';\n  } else if (`${+ lowerCaseValue}` === lowerCaseValue) {\n    return +lowerCaseValue;\n  } else {\n    return value;\n  }\n}\n\n/**\n * Returns the current environment (a global singleton).\n *\n * The environment object contains the evaluated feature values as well as the\n * active platform.\n *\n * @doc {heading: 'Environment'}\n */\nexport function env() {\n  return ENV;\n}\n\nexport let ENV: Environment = null;\nexport function setEnvironmentGlobal(environment: Environment) {\n  ENV = environment;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Note that the identifier globalNameSpace is scoped to this module, but will\n// always resolve to the same global object regardless of how the module is\n// resolved.\n// tslint:disable-next-line:no-any\nlet globalNameSpace: {_tfGlobals: Map<string, any>};\n// tslint:disable-next-line:no-any\nexport function getGlobalNamespace(): {_tfGlobals: Map<string, any>} {\n  if (globalNameSpace == null) {\n    // tslint:disable-next-line:no-any\n    let ns: any;\n    if (typeof (window) !== 'undefined') {\n      ns = window;\n    } else if (typeof (global) !== 'undefined') {\n      ns = global;\n    } else if (typeof (process) !== 'undefined') {\n      ns = process;\n    } else if (typeof (self) !== 'undefined') {\n      ns = self;\n    } else {\n      throw new Error('Could not find a global object');\n    }\n    globalNameSpace = ns;\n  }\n  return globalNameSpace;\n}\n\n// tslint:disable-next-line:no-any\nfunction getGlobalMap(): Map<string, any> {\n  const ns = getGlobalNamespace();\n  if (ns._tfGlobals == null) {\n    ns._tfGlobals = new Map();\n  }\n  return ns._tfGlobals;\n}\n\n/**\n * Returns a globally accessible 'singleton' object.\n *\n * @param key the name of the object\n * @param init a function to initialize to initialize this object\n *             the first time it is fetched.\n */\nexport function getGlobal<T>(key: string, init: () => T): T {\n  const globalMap = getGlobalMap();\n  if (globalMap.has(key)) {\n    return globalMap.get(key);\n  } else {\n    const singleton = init();\n    globalMap.set(key, singleton);\n    return globalMap.get(key);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Allow UpperCamelCase variable names\n// tslint:disable: variable-name\n// Unfortunately just enabling PascalCase per file (tslint:enable:\n// allow-pascal-case) doesn't work.\nimport {NamedTensorInfoMap} from './kernel_registry';\nimport {ExplicitPadding} from './ops/conv_util';\nimport {Activation} from './ops/fused_types';\nimport {TensorInfo} from './tensor_info';\nimport {DataType, DrawOptions, PixelData} from './types';\n\nexport const Abs = 'Abs';\nexport type AbsInputs = UnaryInputs;\n\nexport const Acos = 'Acos';\nexport type AcosInputs = UnaryInputs;\n\nexport const Acosh = 'Acosh';\nexport type AcoshInputs = UnaryInputs;\n\nexport const Add = 'Add';\nexport type AddInputs = BinaryInputs;\n\nexport const AddN = 'AddN';\nexport type AddNInputs = TensorInfo[];\n\nexport const All = 'All';\nexport type AllInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface AllAttrs {\n  axis: number|number[];\n  keepDims: boolean;\n}\n\nexport const Any = 'Any';\nexport type AnyInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface AnyAttrs {\n  axis: number|number[];\n  keepDims: boolean;\n}\n\nexport const ArgMax = 'ArgMax';\nexport type ArgMaxInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface ArgMaxAttrs {\n  axis: number;\n}\n\nexport const ArgMin = 'ArgMin';\nexport type ArgMinInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface ArgMinAttrs {\n  axis: number;\n}\n\nexport const Asin = 'Asin';\nexport type AsinInputs = UnaryInputs;\n\nexport const Asinh = 'Asinh';\nexport type AsinhInputs = UnaryInputs;\n\nexport const Atan = 'Atan';\nexport type AtanInputs = UnaryInputs;\n\nexport const Atanh = 'Atanh';\nexport type AtanhInputs = UnaryInputs;\n\nexport const Atan2 = 'Atan2';\nexport type Atan2Inputs = BinaryInputs;\n\nexport const AvgPool = 'AvgPool';\nexport type AvgPoolInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface AvgPoolAttrs {\n  filterSize: [number, number]|number;\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const AvgPoolGrad = 'AvgPoolGrad';\nexport type AvgPoolGradInputs = Pick<NamedTensorInfoMap, 'dy'|'input'>;\nexport interface AvgPoolGradAttrs {\n  filterSize: [number, number]|number;\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n}\n\nexport const AvgPool3D = 'AvgPool3D';\nexport type AvgPool3DInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface AvgPool3DAttrs {\n  filterSize: [number, number, number]|number;\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same'|number;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n  dataFormat: 'NDHWC'|'NCDHW';\n}\n\nexport const AvgPool3DGrad = 'AvgPool3DGrad';\nexport type AvgPool3DGradInputs = Pick<NamedTensorInfoMap, 'dy'|'input'>;\nexport interface AvgPool3DGradAttrs {\n  filterSize: [number, number, number]|number;\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same'|number;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const BatchMatMul = 'BatchMatMul';\nexport type BatchMatMulInputs = Pick<NamedTensorInfoMap, 'a'|'b'>;\nexport interface BatchMatMulAttrs {\n  transposeA: boolean;\n  transposeB: boolean;\n}\n\nexport const BatchToSpaceND = 'BatchToSpaceND';\nexport type BatchToSpaceNDInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface BatchToSpaceNDAttrs {\n  blockShape: number[];\n  crops: number[][];\n}\n\nexport type BinaryInputs = Pick<NamedTensorInfoMap, 'a'|'b'>;\n\nexport const Bincount = 'Bincount';\nexport type BincountInputs = Pick<NamedTensorInfoMap, 'x'|'weights'>;\nexport interface BincountAttrs {\n  size: number;\n}\n\nexport const BitwiseAnd = 'BitwiseAnd';\nexport type BitwiseAndInputs = BinaryInputs;\n\nexport const BroadcastTo = 'BroadcastTo';\nexport type BroadcastToInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface BroadCastToAttrs {\n  shape: number[];\n  inputShape: number[];  // for gradient\n}\n\nexport const BroadcastArgs = 'BroadcastArgs';\nexport type BroadcastArgsInputs = Pick<NamedTensorInfoMap, 's0'|'s1'>;\n\nexport const Cast = 'Cast';\nexport type CastInputs = UnaryInputs;\nexport interface CastAttrs {\n  dtype: DataType;\n}\n\nexport const Ceil = 'Ceil';\nexport type CeilInputs = UnaryInputs;\n\nexport const ClipByValue = 'ClipByValue';\nexport type ClipByValueInputs = UnaryInputs;\nexport interface ClipByValueAttrs {\n  clipValueMin: number;\n  clipValueMax: number;\n}\n\nexport const Complex = 'Complex';\nexport type ComplexInputs = Pick<NamedTensorInfoMap, 'real'|'imag'>;\n\nexport const ComplexAbs = 'ComplexAbs';\nexport type ComplexAbsInputs = UnaryInputs;\n\nexport const Concat = 'Concat';\nexport type ConcatInputs = TensorInfo[];\nexport interface ConcatAttrs {\n  axis: number;\n}\n\nexport const Conv2D = 'Conv2D';\nexport type Conv2DInputs = Pick<NamedTensorInfoMap, 'x'|'filter'>;\nexport interface Conv2DAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dataFormat: 'NHWC'|'NCHW';\n  dilations: [number, number]|number;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const Conv2DBackpropFilter = 'Conv2DBackpropFilter';\nexport type Conv2DBackpropFilterInputs = Pick<NamedTensorInfoMap, 'x'|'dy'>;\nexport interface Conv2DBackpropFilterAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dataFormat: 'NHWC'|'NCHW';\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n  filterShape: [number, number, number, number];\n}\n\nexport const Conv2DBackpropInput = 'Conv2DBackpropInput';\nexport type Conv2DBackpropInputInputs = Pick<NamedTensorInfoMap, 'dy'|'filter'>;\nexport interface Conv2DBackpropInputAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dataFormat: 'NHWC'|'NCHW';\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n  inputShape: [number, number, number, number];\n}\n\nexport const Conv3D = 'Conv3D';\nexport type Conv3DInputs = Pick<NamedTensorInfoMap, 'x'|'filter'>;\nexport interface Conv3DAttrs {\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same';\n  dataFormat: 'NDHWC'|'NCDHW';\n  dilations: [number, number, number]|number;\n}\n\nexport const Conv3DBackpropFilterV2 = 'Conv3DBackpropFilterV2';\nexport type Conv3DBackpropFilterV2Inputs = Pick<NamedTensorInfoMap, 'x'|'dy'>;\n\nexport interface Conv3DBackpropFilterV2Attrs {\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same';\n  filterShape: [number, number, number, number, number];\n}\n\nexport const Conv3DBackpropInputV2 = 'Conv3DBackpropInputV2';\nexport type Conv3DBackpropInputV2Inputs =\n    Pick<NamedTensorInfoMap, 'dy'|'filter'>;\nexport interface Conv3DBackpropInputV2Attrs {\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same';\n  inputShape: [number, number, number, number, number];\n}\n\nexport const Cos = 'Cos';\nexport type CosInputs = UnaryInputs;\n\nexport const Cosh = 'Cosh';\nexport type CoshInputs = UnaryInputs;\n\nexport const Cumprod = 'Cumprod';\nexport type CumprodInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface CumprodAttrs {\n  axis: number;\n  exclusive: boolean;\n  reverse: boolean;\n}\n\nexport const Cumsum = 'Cumsum';\nexport type CumsumInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface CumsumAttrs {\n  axis: number;\n  exclusive: boolean;\n  reverse: boolean;\n}\n\nexport const CropAndResize = 'CropAndResize';\nexport type CropAndResizeInputs =\n    Pick<NamedTensorInfoMap, 'image'|'boxes'|'boxInd'>;\nexport interface CropAndResizeAttrs {\n  cropSize: [number, number];\n  method: 'bilinear'|'nearest';\n  extrapolationValue: number;\n}\n\nexport const DenseBincount = 'DenseBincount';\nexport type DenseBincountInputs = Pick<NamedTensorInfoMap, 'x'|'weights'>;\nexport interface DenseBincountAttrs {\n  size: number;\n  binaryOutput?: boolean;\n}\n\nexport const DepthToSpace = 'DepthToSpace';\nexport type DepthToSpaceInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface DepthToSpaceAttrs {\n  blockSize: number;\n  dataFormat: 'NHWC'|'NCHW';\n}\n\nexport const DepthwiseConv2dNative = 'DepthwiseConv2dNative';\nexport type DepthwiseConv2dNativeInputs =\n    Pick<NamedTensorInfoMap, 'x'|'filter'>;\nexport interface DepthwiseConv2dNativeAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dataFormat: 'NHWC'|'NCHW';\n  dilations: [number, number]|number;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const DepthwiseConv2dNativeBackpropFilter =\n    'DepthwiseConv2dNativeBackpropFilter';\nexport type DepthwiseConv2dNativeBackpropFilterInputs =\n    Pick<NamedTensorInfoMap, 'x'|'dy'>;\nexport interface DepthwiseConv2dNativeBackpropFilterAttrs {\n  strides: [number, number]|number;\n  dilations: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n  filterShape: [number, number, number, number];\n}\n\nexport const DepthwiseConv2dNativeBackpropInput =\n    'DepthwiseConv2dNativeBackpropInput';\nexport type DepthwiseConv2dNativeBackpropInputInputs =\n    Pick<NamedTensorInfoMap, 'dy'|'filter'>;\nexport interface DepthwiseConv2dNativeBackpropInputAttrs {\n  strides: [number, number]|number;\n  dilations: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n  inputShape: [number, number, number, number];\n}\n\nexport const Diag = 'Diag';\nexport type DiagInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const Dilation2D = 'Dilation2D';\nexport type Dilation2DInputs = Pick<NamedTensorInfoMap, 'x'|'filter'>;\nexport interface Dilation2DAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number;\n  dilations: [number, number]|number;\n}\n\nexport const Dilation2DBackpropInput = 'Dilation2DBackpropInput';\nexport type Dilation2DBackpropInputInputs =\n    Pick<NamedTensorInfoMap, 'x'|'filter'|'dy'>;\n\nexport const Dilation2DBackpropFilter = 'Dilation2DBackpropFilter';\nexport type Dilation2DBackpropFilterInputs =\n    Pick<NamedTensorInfoMap, 'x'|'filter'|'dy'>;\n\nexport const Draw = 'Draw';\nexport type DrawInputs = Pick<NamedTensorInfoMap, 'image'>;\nexport interface DrawAttrs {\n  canvas: HTMLCanvasElement;\n  options?: DrawOptions;\n}\n\nexport const RealDiv = 'RealDiv';\nexport type RealDivInputs = BinaryInputs;\n\nexport const Einsum = 'Einsum';\nexport type EinsumInputs = TensorInfo[];\nexport interface EinsumAttrs {\n  equation: string;\n}\n\nexport const Elu = 'Elu';\nexport type EluInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const EluGrad = 'EluGrad';\nexport type EluGradInputs = Pick<NamedTensorInfoMap, 'dy'|'y'>;\n\nexport const Erf = 'Erf';\nexport type ErfInputs = UnaryInputs;\n\nexport const Equal = 'Equal';\nexport type EqualInputs = BinaryInputs;\n\nexport const Exp = 'Exp';\nexport type ExpInputs = UnaryInputs;\n\nexport const ExpandDims = 'ExpandDims';\nexport type ExpandDimsInputs = Pick<NamedTensorInfoMap, 'input'>;\nexport interface ExpandDimsAttrs {\n  dim: number;\n}\n\nexport const Expm1 = 'Expm1';\nexport type Expm1Inputs = UnaryInputs;\n\nexport const FFT = 'FFT';\nexport type FFTInputs = Pick<NamedTensorInfoMap, 'input'>;\n\nexport const Fill = 'Fill';\nexport interface FillAttrs {\n  shape: number[];\n  value: number|string;\n  dtype: DataType;\n}\n\nexport const FlipLeftRight = 'FlipLeftRight';\nexport type FlipLeftRightInputs = Pick<NamedTensorInfoMap, 'image'>;\n\nexport const Floor = 'Floor';\nexport type FloorInputs = UnaryInputs;\n\nexport const FloorDiv = 'FloorDiv';\nexport type FloorDivInputs = BinaryInputs;\n\nexport const FusedBatchNorm = 'FusedBatchNorm';\nexport type FusedBatchNormInputs =\n    Pick<NamedTensorInfoMap, 'x'|'scale'|'offset'|'mean'|'variance'>;\nexport interface FusedBatchNormAttrs {\n  varianceEpsilon: number;\n}\n\nexport const GatherV2 = 'GatherV2';\nexport type GatherV2Inputs = Pick<NamedTensorInfoMap, 'x'|'indices'>;\nexport interface GatherV2Attrs {\n  axis: number;\n  batchDims: number;\n}\n\nexport const GatherNd = 'GatherNd';\nexport type GatherNdInputs = Pick<NamedTensorInfoMap, 'params'|'indices'>;\n\nexport const Greater = 'Greater';\nexport type GreaterInputs = BinaryInputs;\n\nexport const GreaterEqual = 'GreaterEqual';\nexport type GreaterEqualInputs = BinaryInputs;\n\nexport const Identity = 'Identity';\nexport type IdentityInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const IFFT = 'IFFT';\nexport type IFFTInputs = Pick<NamedTensorInfoMap, 'input'>;\n\nexport const Imag = 'Imag';\nexport type ImagInputs = Pick<NamedTensorInfoMap, 'input'>;\n\nexport const IsFinite = 'IsFinite';\nexport type IsFiniteInputs = UnaryInputs;\n\nexport const IsInf = 'IsInf';\nexport type IsInfInputs = UnaryInputs;\n\nexport const IsNan = 'IsNan';\nexport type IsNanInputs = UnaryInputs;\n\nexport const LeakyRelu = 'LeakyRelu';\nexport type LeakyReluInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface LeakyReluAttrs {\n  alpha: number;\n}\n\nexport const Less = 'Less';\nexport type LessInputs = BinaryInputs;\n\nexport const LessEqual = 'LessEqual';\nexport type LessEqualInputs = BinaryInputs;\n\nexport const LinSpace = 'LinSpace';\nexport interface LinSpaceAttrs {\n  start: number;\n  stop: number;\n  num: number;\n}\nexport const Log = 'Log';\nexport type LogInputs = UnaryInputs;\n\nexport const Log1p = 'Log1p';\nexport type Log1pInputs = UnaryInputs;\n\nexport const LogicalAnd = 'LogicalAnd';\nexport type LogicalAndInputs = BinaryInputs;\n\nexport const LogicalNot = 'LogicalNot';\nexport type LogicalNotInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const LogicalOr = 'LogicalOr';\nexport type LogicalOrInputs = BinaryInputs;\n\nexport const LogicalXor = 'LogicalXor';\nexport type LogicalXorInputs = BinaryInputs;\n\nexport const LogSoftmax = 'LogSoftmax';\nexport type LogSoftmaxInputs = Pick<NamedTensorInfoMap, 'logits'>;\nexport interface LogSoftmaxAttrs {\n  axis: number;\n}\n\nexport const LowerBound = 'LowerBound';\nexport type LowerBoundInputs =\n    Pick<NamedTensorInfoMap, 'sortedSequence'|'values'>;\n\nexport const LRN = 'LRN';\nexport type LRNInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface LRNAttrs {\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n}\n\nexport const LRNGrad = 'LRNGrad';\nexport type LRNGradInputs = Pick<NamedTensorInfoMap, 'x'|'y'|'dy'>;\nexport interface LRNGradAttrs {\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n}\n\nexport const MatrixBandPart = 'MatrixBandPart';\nexport type MatrixBandPartInputs =\n    Pick<NamedTensorInfoMap, 'input'|'numLower'|'numUpper'>;\nexport interface MatrixBandPartAttrs {}\n\nexport const Max = 'Max';\nexport type MaxInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MaxAttrs {\n  reductionIndices: number|number[];\n  keepDims: boolean;\n}\n\nexport const Maximum = 'Maximum';\nexport type MaximumInputs = BinaryInputs;\n\nexport const MaxPool = 'MaxPool';\nexport type MaxPoolInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MaxPoolAttrs {\n  filterSize: [number, number]|number;\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const MaxPoolGrad = 'MaxPoolGrad';\nexport type MaxPoolGradInputs = Pick<NamedTensorInfoMap, 'dy'|'input'|'output'>;\nexport interface MaxPoolGradAttrs {\n  filterSize: [number, number]|number;\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const MaxPool3D = 'MaxPool3D';\nexport type MaxPool3DInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MaxPool3DAttrs {\n  filterSize: [number, number, number]|number;\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same'|number;\n  dataFormat: 'NDHWC'|'NCDHW';\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const MaxPool3DGrad = 'MaxPool3DGrad';\nexport type MaxPool3DGradInputs =\n    Pick<NamedTensorInfoMap, 'dy'|'input'|'output'>;\nexport interface MaxPool3DGradAttrs {\n  filterSize: [number, number, number]|number;\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same'|number;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const MaxPoolWithArgmax = 'MaxPoolWithArgmax';\nexport type MaxPoolWithArgmaxInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MaxPoolWithArgmaxAttrs {\n  filterSize: [number, number]|number;\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number;\n  includeBatchInIndex: boolean;\n}\n\nexport const Mean = 'Mean';\nexport type MeanInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MeanAttrs {\n  axis: number|number[];\n  keepDims: boolean;\n}\n\nexport const Min = 'Min';\nexport type MinInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MinAttrs {\n  axis: number|number[];\n  keepDims: boolean;\n}\n\nexport const Minimum = 'Minimum';\nexport type MinimumInputs = BinaryInputs;\n\nexport const MirrorPad = 'MirrorPad';\nexport type MirrorPadInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MirrorPadAttrs {\n  paddings: Array<[number, number]>;\n  mode: 'reflect'|'symmetric';\n}\n\nexport const Mod = 'Mod';\nexport type ModInputs = BinaryInputs;\n\nexport const Multinomial = 'Multinomial';\nexport type MultinomialInputs = Pick<NamedTensorInfoMap, 'logits'>;\nexport interface MultinomialAttrs {\n  numSamples: number;\n  seed: number;\n  normalized: boolean;\n}\n\nexport const Multiply = 'Multiply';\nexport type MultiplyInputs = BinaryInputs;\n\nexport const Neg = 'Neg';\nexport type NegInputs = UnaryInputs;\n\nexport const NotEqual = 'NotEqual';\nexport type NotEqualInputs = BinaryInputs;\n\nexport const NonMaxSuppressionV3 = 'NonMaxSuppressionV3';\nexport type NonMaxSuppressionV3Inputs =\n    Pick<NamedTensorInfoMap, 'boxes'|'scores'>;\nexport interface NonMaxSuppressionV3Attrs {\n  maxOutputSize: number;\n  iouThreshold: number;\n  scoreThreshold: number;\n}\n\nexport const NonMaxSuppressionV4 = 'NonMaxSuppressionV4';\nexport type NonMaxSuppressionV4Inputs =\n    Pick<NamedTensorInfoMap, 'boxes'|'scores'>;\nexport interface NonMaxSuppressionV4Attrs {\n  maxOutputSize: number;\n  iouThreshold: number;\n  scoreThreshold: number;\n  padToMaxOutputSize: boolean;\n}\n\nexport const NonMaxSuppressionV5 = 'NonMaxSuppressionV5';\nexport type NonMaxSuppressionV5Inputs =\n    Pick<NamedTensorInfoMap, 'boxes'|'scores'>;\nexport interface NonMaxSuppressionV5Attrs {\n  maxOutputSize: number;\n  iouThreshold: number;\n  scoreThreshold: number;\n  softNmsSigma: number;\n}\n\nexport const OnesLike = 'OnesLike';\nexport type OnesLikeInputs = UnaryInputs;\n\nexport const OneHot = 'OneHot';\nexport type OneHotInputs = Pick<NamedTensorInfoMap, 'indices'>;\nexport interface OneHotAttrs {\n  depth: number;\n  onValue: number;\n  offValue: number;\n  dtype: DataType;\n}\n\nexport const Pack = 'Pack';\nexport type PackInputs = TensorInfo[];\nexport interface PackAttrs {\n  axis: number;\n}\n\nexport const PadV2 = 'PadV2';\nexport type PadV2Inputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface PadV2Attrs {\n  paddings: Array<[number, number]>;\n  constantValue: number;\n}\n\nexport const Pool = 'Pool';\nexport type PoolInputs = Pick<NamedTensorInfoMap, 'input'>;\n\nexport const Pow = 'Pow';\nexport type PowInputs = BinaryInputs;\n\nexport const Prelu = 'Prelu';\nexport type PreluInputs = Pick<NamedTensorInfoMap, 'x'|'alpha'>;\n\nexport const Prod = 'Prod';\nexport type ProdInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface ProdAttrs {\n  axis: number|number[];\n  keepDims: boolean;\n}\n\nexport const RaggedGather = 'RaggedGather';\nexport type RaggedGatherInputs = {\n  paramsNestedSplits: TensorInfo[]\n}&Pick<NamedTensorInfoMap, 'paramsDenseValues'|'indices'>;\nexport interface RaggedGatherAttrs {\n  outputRaggedRank: number;\n}\n\nexport const RaggedRange = 'RaggedRange';\nexport type RaggedRangeInputs =\n    Pick<NamedTensorInfoMap, 'starts'|'limits'|'deltas'>;\n\nexport const RaggedTensorToTensor = 'RaggedTensorToTensor';\nexport type RaggedTensorToTensorInputs =\n    Pick<NamedTensorInfoMap, 'shape'|'values'|'defaultValue'>&\n    {rowPartitionTensors: TensorInfo[]};\nexport interface RaggedTensorToTensorAttrs {\n  rowPartitionTypes: string[];\n}\n\nexport const Range = 'Range';\nexport interface RangeAttrs {\n  start: number;\n  stop: number;\n  step: number;\n  dtype: 'float32'|'int32';\n}\n\nexport const Real = 'Real';\nexport type RealInputs = Pick<NamedTensorInfoMap, 'input'>;\n\nexport const Reciprocal = 'Reciprocal';\nexport type ReciprocalInputs = UnaryInputs;\n\nexport const Relu = 'Relu';\nexport type ReluInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const Reshape = 'Reshape';\nexport type ReshapeInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface ReshapeAttrs {\n  shape: number[];\n}\n\nexport const ResizeNearestNeighbor = 'ResizeNearestNeighbor';\nexport type ResizeNearestNeighborInputs = Pick<NamedTensorInfoMap, 'images'>;\nexport interface ResizeNearestNeighborAttrs {\n  alignCorners: boolean;\n  halfPixelCenters: boolean;\n  size: [number, number];\n}\n\nexport const ResizeNearestNeighborGrad = 'ResizeNearestNeighborGrad';\nexport type ResizeNearestNeighborGradInputs =\n    Pick<NamedTensorInfoMap, 'images'|'dy'>;\nexport type ResizeNearestNeighborGradAttrs = ResizeNearestNeighborAttrs;\n\nexport const ResizeBilinear = 'ResizeBilinear';\nexport type ResizeBilinearInputs = Pick<NamedTensorInfoMap, 'images'>;\nexport interface ResizeBilinearAttrs {\n  alignCorners: boolean;\n  halfPixelCenters: boolean;\n  size: [number, number];\n}\n\nexport const ResizeBilinearGrad = 'ResizeBilinearGrad';\nexport type ResizeBilinearGradInputs = Pick<NamedTensorInfoMap, 'images'|'dy'>;\nexport type ResizeBilinearGradAttrs = ResizeBilinearAttrs;\n\nexport const Relu6 = 'Relu6';\nexport type Relu6Inputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const Reverse = 'Reverse';\nexport type ReverseInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface ReverseAttrs {\n  dims: number|number[];\n}\n\nexport const Round = 'Round';\nexport type RoundInputs = UnaryInputs;\n\nexport const Rsqrt = 'Rsqrt';\nexport type RsqrtInputs = UnaryInputs;\n\nexport const ScatterNd = 'ScatterNd';\nexport type ScatterNdInputs = Pick<NamedTensorInfoMap, 'indices'|'updates'>;\nexport interface ScatterNdAttrs {\n  shape: number[];\n}\n\nexport const TensorScatterUpdate = 'TensorScatterUpdate';\nexport type TensorScatterUpdateInputs =\n    Pick<NamedTensorInfoMap, 'tensor'|'indices'|'updates'>;\nexport interface TensorScatterUpdateAttrs {}\n\nexport const SearchSorted = 'SearchSorted';\nexport type SearchSortedInputs =\n    Pick<NamedTensorInfoMap, 'sortedSequence'|'values'>;\nexport interface SearchSortedAttrs {\n  side: 'left'|'right';\n}\n\nexport const Select = 'Select';\nexport type SelectInputs = Pick<NamedTensorInfoMap, 'condition'|'t'|'e'>;\n\nexport const Selu = 'Selu';\nexport type SeluInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const Slice = 'Slice';\nexport type SliceInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface SliceAttrs {\n  begin: number|number[];\n  size: number|number[];\n}\nexport const Sin = 'Sin';\nexport type SinInputs = UnaryInputs;\n\nexport const Sinh = 'Sinh';\nexport type SinhInputs = UnaryInputs;\n\nexport const Sign = 'Sign';\nexport type SignInputs = UnaryInputs;\n\nexport const Sigmoid = 'Sigmoid';\nexport type SigmoidInputs = UnaryInputs;\n\nexport const Softplus = 'Softplus';\nexport type SoftplusInputs = UnaryInputs;\n\nexport const Sqrt = 'Sqrt';\nexport type SqrtInputs = UnaryInputs;\n\nexport const Sum = 'Sum';\nexport type SumInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface SumAttrs {\n  axis: number|number[];\n  keepDims: boolean;\n}\n\nexport const SpaceToBatchND = 'SpaceToBatchND';\nexport type SpaceToBatchNDInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface SpaceToBatchNDAttrs {\n  blockShape: number[];\n  paddings: number[][];\n}\n\nexport const SplitV = 'SplitV';\nexport type SplitVInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface SplitVAttrs {\n  numOrSizeSplits: number[]|number;\n  axis: number;\n}\n\nexport const Softmax = 'Softmax';\nexport type SoftmaxInputs = Pick<NamedTensorInfoMap, 'logits'>;\nexport interface SoftmaxAttrs {\n  dim: number;\n}\n\nexport const SparseFillEmptyRows = 'SparseFillEmptyRows';\nexport type SparseFillEmptyRowsInputs =\n    Pick<NamedTensorInfoMap, 'indices'|'values'|'denseShape'|'defaultValue'>;\n\nexport const SparseReshape = 'SparseReshape';\nexport type SparseReshapeInputs =\n    Pick<NamedTensorInfoMap, 'inputIndices'|'inputShape'|'newShape'>;\n\nexport const SparseSegmentMean = 'SparseSegmentMean';\nexport type SparseSegmentMeanInputs =\n    Pick<NamedTensorInfoMap, 'data'|'indices'|'segmentIds'>;\n\nexport const SparseSegmentSum = 'SparseSegmentSum';\nexport type SparseSegmentSumInputs =\n    Pick<NamedTensorInfoMap, 'data'|'indices'|'segmentIds'>;\n\nexport const SparseToDense = 'SparseToDense';\nexport type SparseToDenseInputs =\n    Pick<NamedTensorInfoMap, 'sparseIndices'|'sparseValues'|'defaultValue'>;\nexport interface SparseToDenseAttrs {\n  outputShape: number[];\n}\n\nexport const SquaredDifference = 'SquaredDifference';\nexport type SquaredDifferenceInputs = BinaryInputs;\n\nexport const Square = 'Square';\nexport type SquareInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const StaticRegexReplace = 'StaticRegexReplace';\nexport type StaticRegexReplaceInputs = UnaryInputs;\nexport interface StaticRegexReplaceAttrs {\n  pattern: string;\n  rewrite: string;\n  replaceGlobal: boolean;\n}\n\nexport const StridedSlice = 'StridedSlice';\nexport type StridedSliceInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface StridedSliceAttrs {\n  begin: number[];\n  end: number[];\n  strides: number[];\n  beginMask: number;\n  endMask: number;\n  ellipsisMask: number;\n  newAxisMask: number;\n  shrinkAxisMask: number;\n}\n\nexport const StringNGrams = 'StringNGrams';\nexport type StringNGramsInputs = Pick<NamedTensorInfoMap, 'data'|'dataSplits'>;\nexport interface StringNGramsAttrs {\n  separator: string;\n  nGramWidths: number[];\n  leftPad: string;\n  rightPad: string;\n  padWidth: number;\n  preserveShortSequences: boolean;\n}\n\nexport const StringSplit = 'StringSplit';\nexport type StringSplitInputs = Pick<NamedTensorInfoMap, 'input'|'delimiter'>;\nexport interface StringSplitAttrs {\n  skipEmpty: boolean;\n}\n\nexport const StringToHashBucketFast = 'StringToHashBucketFast';\nexport type StringToHashBucketFastInputs = Pick<NamedTensorInfoMap, 'input'>;\nexport interface StringToHashBucketFastAttrs {\n  numBuckets: number;\n}\n\nexport const Sub = 'Sub';\nexport type SubInputs = BinaryInputs;\n\nexport const Tan = 'Tan';\nexport type TanInputs = UnaryInputs;\n\nexport const Tanh = 'Tanh';\nexport type TanhInputs = UnaryInputs;\n\nexport const Tile = 'Tile';\nexport type TileInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface TileAttrs {\n  reps: number[];\n}\n\nexport const TopK = 'TopK';\nexport type TopKInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface TopKAttrs {\n  k: number;\n  sorted: boolean;\n}\n\nexport const Transform = 'Transform';\nexport type TransformInputs = Pick<NamedTensorInfoMap, 'image'|'transforms'>;\nexport interface TransformAttrs {\n  interpolation: 'nearest'|'bilinear';\n  fillMode: 'constant'|'reflect'|'wrap'|'nearest';\n  fillValue: number;\n  outputShape?: [number, number];\n}\n\nexport const Transpose = 'Transpose';\nexport type TransposeInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface TransposeAttrs {\n  perm: number[];\n}\n\nexport const Unique = 'Unique';\nexport type UniqueInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface UniqueAttrs {\n  axis: number;\n}\n\nexport type UnaryInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const Unpack = 'Unpack';\nexport type UnpackInputs = Pick<NamedTensorInfoMap, 'value'>;\nexport interface UnpackAttrs {\n  axis: number;\n}\n\nexport const UnsortedSegmentSum = 'UnsortedSegmentSum';\nexport type UnsortedSegmentSumInputs =\n    Pick<NamedTensorInfoMap, 'x'|'segmentIds'>;\nexport interface UnsortedSegmentSumAttrs {\n  numSegments: number;\n}\n\nexport const UpperBound = 'UpperBound';\nexport type UpperBoundInputs =\n    Pick<NamedTensorInfoMap, 'sortedSequence'|'values'>;\n\nexport const ZerosLike = 'ZerosLike';\nexport type ZerosLikeInputs = UnaryInputs;\n\n/**\n * TensorFlow.js-only kernels\n */\nexport const Step = 'Step';\nexport type StepInputs = UnaryInputs;\nexport interface StepAttrs {\n  alpha: number;\n}\n\nexport const FromPixels = 'FromPixels';\nexport interface FromPixelsInputs {\n  pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      HTMLVideoElement|ImageBitmap;\n}\nexport interface FromPixelsAttrs {\n  numChannels: number;\n}\n\nexport const RotateWithOffset = 'RotateWithOffset';\nexport type RotateWithOffsetInputs = Pick<NamedTensorInfoMap, 'image'>;\nexport interface RotateWithOffsetAttrs {\n  radians: number;\n  fillValue: number|[number, number, number];\n  center: number|[number, number];\n}\n\nexport const _FusedMatMul = '_FusedMatMul';\n// tslint:disable-next-line: class-name\nexport interface _FusedMatMulInputs extends NamedTensorInfoMap {\n  a: TensorInfo;\n  b: TensorInfo;\n  bias?: TensorInfo;\n  preluActivationWeights?: TensorInfo;\n}\n// tslint:disable-next-line: class-name\nexport interface _FusedMatMulAttrs {\n  transposeA: boolean;\n  transposeB: boolean;\n  activation: Activation;\n  leakyreluAlpha?: number;\n}\n\nexport const FusedConv2D = 'FusedConv2D';\nexport interface FusedConv2DInputs extends NamedTensorInfoMap {\n  x: TensorInfo;\n  filter: TensorInfo;\n  bias?: TensorInfo;\n  preluActivationWeights?: TensorInfo;\n}\nexport interface FusedConv2DAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dataFormat: 'NHWC'|'NCHW';\n  dilations: [number, number]|number;\n  dimRoundingMode: 'floor'|'round'|'ceil';\n  activation: Activation;\n  leakyreluAlpha?: number;\n}\n\nexport const FusedDepthwiseConv2D = 'FusedDepthwiseConv2D';\nexport interface FusedDepthwiseConv2DInputs extends NamedTensorInfoMap {\n  x: TensorInfo;\n  filter: TensorInfo;\n  bias?: TensorInfo;\n  preluActivationWeights?: TensorInfo;\n}\nexport interface FusedDepthwiseConv2DAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dataFormat: 'NHWC'|'NCHW';\n  dilations: [number, number]|number;\n  dimRoundingMode: 'floor'|'round'|'ceil';\n  activation: Activation;\n  leakyreluAlpha?: number;\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from './environment';\n\nexport function warn(...msg: Array<{}>): void {\n  if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n    console.warn(...msg);\n  }\n}\n\nexport function log(...msg: Array<{}>): void {\n  if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n    console.log(...msg);\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from './environment';\nimport {getGlobal} from './global_util';\nimport * as log from './log';\nimport {NamedGradientMap} from './tape';\nimport {Tensor} from './tensor';\nimport {TensorInfo} from './tensor_info';\nimport {RecursiveArray} from './types';\n\nconst kernelRegistry =\n  getGlobal('kernelRegistry', () => new Map<`${string}_${string}`,\n    KernelConfig>());\nconst gradRegistry =\n  getGlobal('gradRegistry', () => new Map<string, GradConfig>());\n\ntype AttributeValue =\n  number | number[] | boolean | boolean[] | string | string[] | NamedAttrMap;\n\n/** These are extra non-tensor/primitive params passed to kernel functions. */\nexport type Attribute = AttributeValue | RecursiveArray<AttributeValue>;\n\n/** Specifies the code to run when executing a kernel. */\nexport type KernelFunc = (params: {\n  inputs: NamedTensorInfoMap,\n  backend: {},\n  attrs?: NamedAttrMap,\n}) => TensorInfo | TensorInfo[];\n\n/** The function to run when computing a gradient during backprop. */\nexport type GradFunc =\n  (dy: Tensor | Tensor[], saved: Tensor[], attrs: NamedAttrMap) =>\n    NamedGradientMap;\n\n/** Function that gets called after the backend initializes. */\nexport type KernelSetupFunc = (backend: {}) => void;\n/** Function that gets called right before the backend is disposed. */\nexport type KernelDisposeFunc = KernelSetupFunc;\n\n/** Config object for registering a kernel in the global registry. */\nexport interface KernelConfig {\n  kernelName: string;\n  backendName: string;\n  kernelFunc: KernelFunc;\n  setupFunc?: KernelSetupFunc;\n  disposeFunc?: KernelDisposeFunc;\n}\n\n/** Config object for registering a gradient in the global registry. */\nexport interface GradConfig {\n  kernelName: string;\n  inputsToSave?: string[];\n  // When saveAllInputs is true, all inputs will be saved. Only use this flag\n  // if inputs is an array of Tensors.\n  saveAllInputs?: boolean;\n  outputsToSave?: boolean[];\n  gradFunc: GradFunc;\n}\n\nexport interface NamedTensorInfoMap {\n  [name: string]: TensorInfo|undefined;\n}\n\nexport interface NamedAttrMap {\n  [name: string]: Attribute;\n}\n\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\nexport function getKernel(\n    kernelName: string, backendName: string): KernelConfig {\n  const key = makeKey(kernelName, backendName);\n  return kernelRegistry.get(key);\n}\n\n/**\n * Returns the registered gradient info associated with the provided kernel.\n * @param kernelName The official TF kernel name.\n */\nexport function getGradient(kernelName: string): GradConfig {\n  return gradRegistry.get(kernelName);\n}\n\nexport function getKernelsForBackend(backendName: string): KernelConfig[] {\n  const it = kernelRegistry.entries();\n  const result: KernelConfig[] = [];\n\n  while (true) {\n    const {done, value} = it.next();\n    if (done) {\n      break;\n    }\n    const [key, config] = value;\n    const [backend, ] = key.split('_');\n    if (backend === backendName) {\n      result.push(config);\n    }\n  }\n  return result;\n}\n\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\nexport function registerKernel(config: KernelConfig) {\n  const {kernelName, backendName} = config;\n  const key = makeKey(kernelName, backendName);\n  if (kernelRegistry.has(key)) {\n    log.warn(\n        `The kernel '${kernelName}' for backend ` +\n        `'${backendName}' is already registered`);\n  }\n  kernelRegistry.set(key, config);\n}\n\n/**\n * Registers a gradient function for a given kernel in the global registry,\n * to be used during the back-propagation of that kernel.\n *\n * @param config An object with the following properties:\n * - `kernelName` The name of the kernel that the gradient function is for.\n * - `gradFunc` The function to run during back-propagation.\n */\nexport function registerGradient(config: GradConfig) {\n  const {kernelName} = config;\n\n  if (gradRegistry.has(kernelName)) {\n    // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n    // to debug mode.\n    if (env().getBool('DEBUG')) {\n      log.warn(`Overriding the gradient for '${kernelName}'`);\n    }\n  }\n  gradRegistry.set(kernelName, config);\n}\n\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\nexport function unregisterKernel(\n    kernelName: string, backendName: string): void {\n  const key = makeKey(kernelName, backendName);\n  if (!kernelRegistry.has(key)) {\n    throw new Error(\n        `The kernel '${kernelName}' for backend ` +\n        `'${backendName}' is not registered`);\n  }\n  kernelRegistry.delete(key);\n}\n\n/** Removes the registered gradient from the global registry. */\nexport function unregisterGradient(kernelName: string): void {\n  if (!gradRegistry.has(kernelName)) {\n    throw new Error(\n        `The gradient '${kernelName}' for backend is not registered`);\n  }\n  gradRegistry.delete(kernelName);\n}\n\n/**\n * Finds kernels that have already been registered to a backend and re-registers\n * them for a new backend. Useful for registering custom backends.\n * @param registeredBackendName Already registered backend.\n * @param newBackendName New backend.\n */\nexport function copyRegisteredKernels(\n    registeredBackendName: string, newBackendName: string): void {\n  const kernels = getKernelsForBackend(registeredBackendName);\n  kernels.forEach(kernelConfig => {\n    const newKernelConfig =\n        Object.assign({}, kernelConfig, {backendName: newBackendName});\n    registerKernel(newKernelConfig);\n  });\n}\n\nfunction makeKey(kernelName: string,\n                 backendName: string): `${string}_${string}` {\n  return `${backendName}_${kernelName}`;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from './environment';\nimport {isTypedArrayBrowser} from './platforms/is_typed_array_browser';\nimport {BackendValues, DataType, RecursiveArray, TensorLike, TypedArray} from './types';\nimport * as base from './util_base';\nexport * from './util_base';\nexport * from './hash_util';\n\n/**\n * Create typed array for scalar value. Used for storing in `DataStorage`.\n */\nexport function createScalarValue(\n    value: DataType, dtype: DataType): BackendValues {\n  if (dtype === 'string') {\n    return encodeString(value);\n  }\n\n  return toTypedArray([value], dtype);\n}\n\nfunction noConversionNeeded(a: TensorLike, dtype: DataType): boolean {\n  return (a instanceof Float32Array && dtype === 'float32') ||\n      (a instanceof Int32Array && dtype === 'int32') ||\n      (a instanceof Uint8Array && dtype === 'bool');\n}\n\nexport function toTypedArray(a: TensorLike, dtype: DataType): TypedArray {\n  if (dtype === 'string') {\n    throw new Error('Cannot convert a string[] to a TypedArray');\n  }\n  if (Array.isArray(a)) {\n    a = flatten(a);\n  }\n\n  if (env().getBool('DEBUG')) {\n    base.checkConversionForErrors(a as number[], dtype);\n  }\n  if (noConversionNeeded(a, dtype)) {\n    return a as TypedArray;\n  }\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(a as number[]);\n  } else if (dtype === 'int32') {\n    return new Int32Array(a as number[]);\n  } else if (dtype === 'bool') {\n    const bool = new Uint8Array((a as number[]).length);\n    for (let i = 0; i < bool.length; ++i) {\n      if (Math.round((a as number[])[i]) !== 0) {\n        bool[i] = 1;\n      }\n    }\n    return bool;\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n\n/**\n * Returns the current high-resolution time in milliseconds relative to an\n * arbitrary time in the past. It works across different platforms (node.js,\n * browsers).\n *\n * ```js\n * console.log(tf.util.now());\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function now(): number {\n  return env().platform.now();\n}\n\n/**\n * Returns a platform-specific implementation of\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n *\n * If `fetch` is defined on the global object (`window`, `process`, etc.),\n * `tf.util.fetch` returns that function.\n *\n * If not, `tf.util.fetch` returns a platform-specific solution.\n *\n * ```js\n * const resource = await tf.util.fetch('https://cdn.jsdelivr.net/npm/@tensorflow/tfjs');\n * // handle response\n * ```\n *\n * @doc {heading: 'Util'}\n */\nexport function fetch(\n    path: string, requestInits?: RequestInit): Promise<Response> {\n  return env().platform.fetch(path, requestInits);\n}\n\n/**\n * Encodes the provided string into bytes using the provided encoding scheme.\n *\n * @param s The string to encode.\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function encodeString(s: string, encoding = 'utf-8'): Uint8Array {\n  encoding = encoding || 'utf-8';\n  return env().platform.encode(s, encoding);\n}\n\n/**\n * Decodes the provided bytes into a string using the provided encoding scheme.\n * @param bytes The bytes to decode.\n *\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function decodeString(bytes: Uint8Array, encoding = 'utf-8'): string {\n  encoding = encoding || 'utf-8';\n  return env().platform.decode(bytes, encoding);\n}\n\nexport function isTypedArray(a: {}): a is Float32Array|Int32Array|Uint8Array|\n    Uint8ClampedArray {\n  // TODO(mattsoulanille): Remove this fallback in 5.0.0\n  if (env().platform.isTypedArray != null) {\n    return env().platform.isTypedArray(a);\n  } else {\n    return isTypedArrayBrowser(a);\n  }\n}\n\n// NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n/**\n *  Flattens an arbitrarily nested array.\n *\n * ```js\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\n * const flat = tf.util.flatten(a);\n * console.log(flat);\n * ```\n *\n *  @param arr The nested array to flatten.\n *  @param result The destination array which holds the elements.\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\n *      to false.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function\nflatten<T extends number|boolean|string|Promise<number>|TypedArray>(\n    arr: T|RecursiveArray<T>, result: T[] = [], skipTypedArray = false): T[] {\n  if (result == null) {\n    result = [];\n  }\n  if (typeof arr === 'boolean' || typeof arr === 'number' ||\n    typeof arr === 'string' || base.isPromise(arr) || arr == null ||\n      isTypedArray(arr) && skipTypedArray) {\n    result.push(arr as T);\n  } else if (Array.isArray(arr) || isTypedArray(arr)) {\n    for (let i = 0; i < arr.length; ++i) {\n      flatten(arr[i], result, skipTypedArray);\n    }\n  } else {\n    let maxIndex = -1;\n    for (const key of Object.keys(arr)) {\n      // 0 or positive integer.\n      if (/^([1-9]+[0-9]*|0)$/.test(key)) {\n        maxIndex = Math.max(maxIndex, Number(key));\n      }\n    }\n    for (let i = 0; i <= maxIndex; i++) {\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      flatten((arr as RecursiveArray<T>)[i], result, skipTypedArray);\n    }\n  }\n  return result;\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport function isTypedArrayBrowser(a: unknown): a is Uint8Array\n  | Float32Array | Int32Array | Uint8ClampedArray {\n  return a instanceof Float32Array || a instanceof Int32Array ||\n    a instanceof Uint8Array || a instanceof Uint8ClampedArray;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Workaround for allowing cjs module to be included in bundle created by\n// rollup.\nimport * as LongExports from 'long';\n// tslint:disable-next-line\nconst Long: LongExports.LongConstructor =\n    // tslint:disable-next-line\n    (LongExports as any).default || LongExports;\n\nexport function hexToLong(hex: string): Long {\n  return Long.fromString(hex, true, 16);\n}\n\n// Some primes between 2^63 and 2^64 for various uses.\n// Hex 0xc3a5c85c97cb3127\nconst k0: Long = hexToLong('c3a5c85c97cb3127');\n// Hex 0xb492b66fbe98f273\nconst k1: Long = hexToLong('b492b66fbe98f273');\n// Hex 0x9ae16a3b2f90404f\nconst k2: Long = hexToLong('9ae16a3b2f90404f');\n\nfunction shiftMix(val: Long): Long {\n  return val.xor(val.shru(47));\n}\n\nfunction fetch(s: Uint8Array, offset: number, numBytes: number): Long {\n  const bytes = s.slice(offset, offset + numBytes);\n  return Long.fromBytes(Array.from(bytes), true, true);\n}\n\nfunction fetch64(s: Uint8Array, offset: number): Long {\n  return fetch(s, offset, 8);\n}\n\nfunction fetch32(s: Uint8Array, offset: number): Long {\n  return fetch(s, offset, 4);\n}\n\nfunction rotate64(val: Long, shift: number): Long {\n  // Avoid shifting by 64: doing so yields an undefined result.\n  return shift === 0 ? val : val.shru(shift).or(val.shl(64 - shift));\n}\n\nfunction hashLen16(u: Long, v: Long, mul = hexToLong('9ddfea08eb382d69')) {\n  // Murmur-inspired hashing.\n  let a = u.xor(v).mul(mul);\n  a = a.xor(a.shru(47));\n  let b = v.xor(a).mul(mul);\n  b = b.xor(b.shru(47));\n  b = b.mul(mul);\n  return b;\n}\n\n// Return a 16-byte hash for 48 bytes.  Quick and dirty.\n// Callers do best to use \"random-looking\" values for a and b.\nfunction weakHashLen32WithSeeds(\n    w: Long, x: Long, y: Long, z: Long, a: Long, b: Long) {\n  a = a.add(w);\n  b = rotate64(b.add(a).add(z), 21);\n  const c = a;\n  a = a.add(x);\n  a = a.add(y);\n  b = b.add(rotate64(a, 44));\n  return [a.add(z), b.add(c)];\n}\n\nfunction weakHashLen32WithSeedsStr(\n    s: Uint8Array, offset: number, a: Long, b: Long) {\n  return weakHashLen32WithSeeds(\n      fetch64(s, offset), fetch64(s, offset + 8), fetch64(s, offset + 16),\n      fetch64(s, offset + 24), a, b);\n}\n\nfunction hashLen0to16(s: Uint8Array, len = s.length): Long {\n  if (len >= 8) {\n    const mul = k2.add(len * 2);\n    const a = fetch64(s, 0).add(k2);\n    const b = fetch64(s, len - 8);\n    const c = rotate64(b, 37).mul(mul).add(a);\n    const d = rotate64(a, 25).add(b).mul(mul);\n    return hashLen16(c, d, mul);\n  }\n  if (len >= 4) {\n    const mul = k2.add(len * 2);\n    const a = fetch32(s, 0);\n    return hashLen16(a.shl(3).add(len), fetch32(s, len - 4), mul);\n  }\n  if (len > 0) {\n    const a = s[0];\n    const b = s[len >> 1];\n    const c = s[len - 1];\n    const y = a + (b << 8);\n    const z = len + (c << 2);\n    return shiftMix(k2.mul(y).xor(k0.mul(z))).mul(k2);\n  }\n  return k2;\n}\n\nfunction hashLen17to32(s: Uint8Array, len = s.length): Long {\n  const mul = k2.add(len * 2);\n  const a = fetch64(s, 0).mul(k1);\n  const b = fetch64(s, 8);\n  const c = fetch64(s, len - 8).mul(mul);\n  const d = fetch64(s, len - 16).mul(k2);\n  return hashLen16(\n      rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d),\n      a.add(rotate64(b.add(k2), 18)).add(c), mul);\n}\n\nfunction hashLen33to64(s: Uint8Array, len = s.length): Long {\n  const mul = k2.add(len * 2);\n  const a = fetch64(s, 0).mul(k2);\n  const b = fetch64(s, 8);\n  const c = fetch64(s, len - 8).mul(mul);\n  const d = fetch64(s, len - 16).mul(k2);\n  const y = rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d);\n  const z = hashLen16(y, a.add(rotate64(b.add(k2), 18)).add(c), mul);\n  const e = fetch64(s, 16).mul(mul);\n  const f = fetch64(s, 24);\n  const g = y.add(fetch64(s, len - 32)).mul(mul);\n  const h = z.add(fetch64(s, len - 24)).mul(mul);\n  return hashLen16(\n      rotate64(e.add(f), 43).add(rotate64(g, 30)).add(h),\n      e.add(rotate64(f.add(a), 18)).add(g), mul);\n}\n\nexport function fingerPrint64(s: Uint8Array, len = s.length): Long {\n  const seed: Long = Long.fromNumber(81, true);\n  if (len <= 32) {\n    if (len <= 16) {\n      return hashLen0to16(s, len);\n    } else {\n      return hashLen17to32(s, len);\n    }\n  } else if (len <= 64) {\n    return hashLen33to64(s, len);\n  }\n\n  // For strings over 64 bytes we loop.  Internal state consists of\n  // 56 bytes: v, w, x, y, and z.\n  let x = seed;\n  let y = seed.mul(k1).add(113);\n\n  let z = shiftMix(y.mul(k2).add(113)).mul(k2);\n  let v = [Long.UZERO, Long.UZERO];\n  let w = [Long.UZERO, Long.UZERO];\n  x = x.mul(k2).add(fetch64(s, 0));\n\n  let offset = 0;\n  // Set end so that after the loop we have 1 to 64 bytes left to process.\n  const end = ((len - 1) >> 6) * 64;\n  const last64 = end + ((len - 1) & 63) - 63;\n\n  do {\n    x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(k1);\n    y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(k1);\n    x = x.xor(w[1]);\n    y = y.add(v[0]).add(fetch64(s, offset + 40));\n    z = rotate64(z.add(w[0]), 33).mul(k1);\n    v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(k1), x.add(w[0]));\n    w = weakHashLen32WithSeedsStr(\n        s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n\n    [z, x] = [x, z];\n    offset += 64;\n  } while (offset !== end);\n  const mul = k1.add(z.and(0xff).shl(1));\n  // Point to the last 64 bytes of input.\n  offset = last64;\n\n  w[0] = w[0].add((len - 1) & 63);\n  v[0] = v[0].add(w[0]);\n  w[0] = w[0].add(v[0]);\n\n  x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(mul);\n  y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(mul);\n  x = x.xor(w[1].mul(9));\n  y = y.add(v[0].mul(9).add(fetch64(s, offset + 40)));\n  z = rotate64(z.add(w[0]), 33).mul(mul);\n  v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(mul), x.add(w[0]));\n  w = weakHashLen32WithSeedsStr(\n      s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n\n  [z, x] = [x, z];\n\n  return hashLen16(\n      hashLen16(v[0], w[0], mul).add(shiftMix(y).mul(k0)).add(z),\n      hashLen16(v[1], w[1], mul).add(x), mul);\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendTimer, BackendTimingInfo} from './backends/backend';\nimport {env} from './environment';\nimport {Tensor} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport {DataType, DataTypeMap, TypedArray} from './types';\nimport * as util from './util';\n\nexport type KernelProfile = {\n  kernelName: string,\n  outputs: Tensor[],\n  inputs: NamedTensorMap,\n  timeMs: Promise<number|{error: string}>,\n  extraInfo: Promise<string>\n};\n\nexport class Profiler {\n  constructor(private backendTimer: BackendTimer, private logger?: Logger) {\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n\n  profileKernel(kernelName: string, inputs: NamedTensorMap, f: () => Tensor[]):\n      KernelProfile {\n    let outputs: Tensor[];\n    const holdResultWrapperFn = () => {\n      outputs = f();\n    };\n    let timer: Promise<BackendTimingInfo>;\n    const start = util.now();\n    if (this.backendTimer.timerAvailable()) {\n      timer = this.backendTimer.time(holdResultWrapperFn);\n    } else {\n      holdResultWrapperFn();\n      for (const output of outputs) {\n        output.dataSync();\n      }\n      timer = Promise.resolve({kernelMs: util.now() - start});\n    }\n    if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n      for (let i = 0; i < outputs.length; i++) {\n        const output = outputs[i];\n        // Dangling promise here because we don't want to propagate up\n        // asynchronicity.\n        output.data().then(tensorVals => {\n          checkComputationForErrors(tensorVals, output.dtype, kernelName);\n        });\n      }\n    }\n\n    const kernelProfile = {\n      kernelName,\n      outputs,\n      inputs,\n      timeMs: timer.then(timing => timing.kernelMs),\n      extraInfo: timer.then(\n          timing => timing.getExtraProfileInfo != null ?\n              timing.getExtraProfileInfo() :\n              '')\n    };\n    return kernelProfile;\n  }\n\n  logKernelProfile(kernelProfile: KernelProfile): void {\n    const {kernelName, outputs, timeMs, inputs, extraInfo} = kernelProfile;\n\n    outputs.forEach(result => {\n      Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n        this.logger.logKernelProfile(\n            kernelName, result, valueContainer[0], valueContainer[1], inputs,\n            valueContainer[2]);\n      });\n    });\n  }\n}\n\nexport function checkComputationForErrors<D extends DataType>(\n    vals: DataTypeMap[D], dtype: D, kernelName: string): boolean {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i] as number;\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(`Found ${num} in the result of '${kernelName}'`);\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class Logger {\n  logKernelProfile(\n      name: string, result: Tensor, vals: TypedArray,\n      timeMs: number|{error: string}, inputs: NamedTensorMap,\n      extraInfo?: string) {\n    const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) :\n                                              timeMs['error'];\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = '';\n\n    for (const name in inputs) {\n      const input = inputs[name];\n      if (input != null) {\n        // The input might be a non-tensor (e.g HTMLImageElement), in which case\n        // we claim the output shape as input shape.\n        const inputShape = input.shape || result.shape;\n        const inputRank = inputShape.length;\n        inputShapesDescription +=\n            `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n      }\n    }\n\n    console.log(\n        `%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${\n            inputShapesDescription}\\t%c${extraInfo}`,\n        'font-weight:bold', 'color:red', 'color:blue', 'color: orange',\n        'color: green', 'color: steelblue');\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport * as util from './util';\n\nexport interface TapeNode {\n  id: number;\n  kernelName: string;\n  outputs: Tensor[];\n  inputs: NamedTensorMap;\n  // Optional params, defined only for ops with gradient impl.\n  gradient?: (dys: Tensor[]) => NamedGradientMap;\n  saved?: Tensor[];\n}\n\nexport type NamedGradientMap = {\n  [inputName: string]: () => Tensor;\n};\n\n/**\n * Computes a list of TapeNodes that connect x to y, filtering everything else\n * out and preserving the order of the original tape elements.\n *\n * @param tape The tape elements to filter.\n * @param xs The input Tensors.\n * @param y The output Tensor.\n */\nexport function getFilteredNodesXToY(\n    tape: TapeNode[], xs: Tensor[], y: Tensor): TapeNode[] {\n  // Forward pass to compute all the nodes and Tensors that are transitively a\n  // function of x.\n  const tensorsFromX: {[tensorId: number]: boolean} = {};\n  const nodesFromX: {[nodeId: number]: boolean} = {};\n  for (let i = 0; i < xs.length; i++) {\n    tensorsFromX[xs[i].id] = true;\n  }\n\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n    const nodeInputs = node.inputs;\n    for (const inputName in nodeInputs) {\n      const input = nodeInputs[inputName];\n\n      let anyInputFromX = false;\n      for (let j = 0; j < xs.length; j++) {\n        if (tensorsFromX[input.id]) {\n          node.outputs.forEach(output => tensorsFromX[output.id] = true);\n          anyInputFromX = true;\n          nodesFromX[node.id] = true;\n          break;\n        }\n      }\n\n      if (anyInputFromX) {\n        break;\n      }\n    }\n  }\n\n  // Backward pass to find all of the nodes and Tensors that lead to y.\n  const tensorsLeadToY: {[tensorId: number]: boolean} = {};\n  tensorsLeadToY[y.id] = true;\n  const nodesToY: {[nodeId: number]: boolean} = {};\n\n  for (let i = tape.length - 1; i >= 0; i--) {\n    const node = tape[i];\n    const nodeInputs = node.inputs;\n\n    // If any of the outputs lead to y, mark all of the inputs as leading to y.\n    for (let j = 0; j < node.outputs.length; j++) {\n      if (tensorsLeadToY[node.outputs[j].id]) {\n        for (const inputName in nodeInputs) {\n          tensorsLeadToY[nodeInputs[inputName].id] = true;\n          nodesToY[node.id] = true;\n        }\n        break;\n      }\n    }\n  }\n\n  // Return the paths that come from x and lead to y.\n  const filteredTape: TapeNode[] = [];\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n\n    if (nodesFromX[node.id] && nodesToY[node.id]) {\n      // Prune the inputs from the node that aren't a function of x.\n      const prunedInputs: {[inputName: string]: Tensor} = {};\n      for (const inputName in node.inputs) {\n        const nodeInput = node.inputs[inputName];\n        if (tensorsFromX[nodeInput.id]) {\n          prunedInputs[inputName] = nodeInput;\n        }\n      }\n\n      // Copy the node and overwrite inputsAndArgs to the pruned version.\n      const prunedNode = Object.assign({}, node);\n      prunedNode.inputs = prunedInputs;\n      prunedNode.outputs = node.outputs;\n\n      filteredTape.push(prunedNode);\n    }\n  }\n\n  return filteredTape;\n}\n\n/**\n * Backpropagate gradients through the filtered TapeNodes.\n *\n * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map\n * is mutated by this method.\n * @param filteredTape The filtered TapeNodes to backprop through.\n */\nexport function backpropagateGradients(\n    tensorAccumulatedGradientMap: {[tensorId: number]: Tensor},\n    filteredTape: TapeNode[], tidy: (f: Function) => Tensor,\n    add: (a: Tensor, b: Tensor) => Tensor) {\n  // Walk the tape backward and keep a map of Tensor to its gradient.\n  for (let i = filteredTape.length - 1; i >= 0; i--) {\n    const node = filteredTape[i];\n\n    const dys: Tensor[] = [];\n    node.outputs.forEach(o => {\n      const gradTensor = tensorAccumulatedGradientMap[o.id];\n      if (gradTensor != null) {\n        dys.push(gradTensor);\n      } else {\n        // This particular output is not in the back-propagation subgraph, so it\n        // does not affect the final output, thus we put null for its dy.\n        dys.push(null);\n      }\n    });\n\n    if (node.gradient == null) {\n      throw new Error(\n          `Cannot compute gradient: gradient function not found ` +\n          `for ${node.kernelName}.`);\n    }\n\n    // Backprop dy through this node and accumulate gradients over the inputs.\n    const inputGradients = node.gradient(dys);\n\n    for (const inputName in node.inputs) {\n      if (!(inputName in inputGradients)) {\n        throw new Error(\n            `Cannot backprop through input ${inputName}. ` +\n            `Available gradients found: ${Object.keys(inputGradients)}.`);\n      }\n\n      // Call the gradient function.\n      const dx = tidy(() => inputGradients[inputName]());\n      if (dx.dtype !== 'float32') {\n        throw new Error(\n            `Error in gradient for op ${\n                node.kernelName}. The gradient of input ` +\n            `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);\n      }\n      const x = node.inputs[inputName];\n      if (!util.arraysEqual(dx.shape, x.shape)) {\n        throw new Error(\n            `Error in gradient for op ${\n                node.kernelName}. The gradient of input ` +\n            `'${inputName}' has shape '${dx.shape}', which does not match ` +\n            `the shape of the input '${x.shape}'`);\n      }\n\n      if (tensorAccumulatedGradientMap[x.id] == null) {\n        tensorAccumulatedGradientMap[x.id] = dx;\n      } else {\n        const curGradient = tensorAccumulatedGradientMap[x.id];\n        tensorAccumulatedGradientMap[x.id] = add(curGradient, dx);\n        curGradient.dispose();\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray} from './types';\nimport {computeStrides, isString, rightPad, sizeFromShape} from './util';\n\n// Maximum number of values before we decide to show ellipsis.\nconst FORMAT_LIMIT_NUM_VALS = 20;\n// Number of first and last values to show when displaying a, b,...,y, z.\nconst FORMAT_NUM_FIRST_LAST_VALS = 3;\n// Number of significant digits to show.\nconst FORMAT_NUM_SIG_DIGITS = 7;\n\nexport function tensorToString(\n    vals: TypedArray|string[], shape: number[], dtype: DataType,\n    verbose: boolean) {\n  const strides = computeStrides(shape);\n  const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);\n  const rank = shape.length;\n  const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);\n  const lines = ['Tensor'];\n  if (verbose) {\n    lines.push(`  dtype: ${dtype}`);\n    lines.push(`  rank: ${rank}`);\n    lines.push(`  shape: [${shape}]`);\n    lines.push(`  values:`);\n  }\n  lines.push(valsLines.map(l => '    ' + l).join('\\n'));\n  return lines.join('\\n');\n}\n\nfunction computeMaxSizePerColumn(\n    vals: TypedArray|string[], shape: number[], dtype: DataType,\n    strides: number[]): number[] {\n  const n = sizeFromShape(shape);\n  const numCols = strides[strides.length - 1];\n  const padPerCol = new Array(numCols).fill(0);\n  const rank = shape.length;\n  const valuesOrTuples =\n      dtype === 'complex64' ? createComplexTuples(vals) : vals;\n\n  if (rank > 1) {\n    for (let row = 0; row < n / numCols; row++) {\n      const offset = row * numCols;\n      for (let j = 0; j < numCols; j++) {\n        padPerCol[j] = Math.max(\n            padPerCol[j],\n            valToString(valuesOrTuples[offset + j], 0, dtype).length);\n      }\n    }\n  }\n  return padPerCol;\n}\n\nfunction valToString(\n    val: number|string|[number, number], pad: number, dtype: DataType) {\n  let valStr: string;\n  if (Array.isArray(val)) {\n    valStr = `${parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ` +\n        `${parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`;\n  } else if (isString(val)) {\n    valStr = `'${val}'`;\n  } else if (dtype === 'bool') {\n    valStr = boolNumToString(val);\n  } else {\n    valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();\n  }\n\n  return rightPad(valStr, pad);\n}\n\nfunction boolNumToString(v: number): string {\n  return v === 0 ? 'false' : 'true';\n}\n\nfunction subTensorToString(\n    vals: TypedArray|string[], shape: number[], dtype: DataType,\n    strides: number[], padPerCol: number[], isLast = true): string[] {\n  const storagePerElement = dtype === 'complex64' ? 2 : 1;\n\n  const size = shape[0];\n  const rank = shape.length;\n  if (rank === 0) {\n    if (dtype === 'complex64') {\n      const complexTuple = createComplexTuples(vals);\n      return [valToString(complexTuple[0], 0, dtype)];\n    }\n    if (dtype === 'bool') {\n      return [boolNumToString(vals[0] as number)];\n    }\n    return [vals[0].toString()];\n  }\n\n  if (rank === 1) {\n    if (size > FORMAT_LIMIT_NUM_VALS) {\n      const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;\n\n      let firstVals = Array.from<number|string|[number, number]>(\n          vals.slice(0, firstValsSize));\n      let lastVals = Array.from<number|string|[number, number]>(vals.slice(\n          (size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement,\n          size * storagePerElement));\n      if (dtype === 'complex64') {\n        firstVals = createComplexTuples(firstVals);\n        lastVals = createComplexTuples(lastVals);\n      }\n      return [\n        '[' +\n        firstVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n            .join(', ') +\n        ', ..., ' +\n        lastVals\n            .map(\n                (x, i) => valToString(\n                    x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype))\n            .join(', ') +\n        ']'\n      ];\n    }\n    const displayVals: Array<number|string|[number, number]> =\n        dtype === 'complex64' ? createComplexTuples(vals) :\n                                Array.from<number|string>(vals);\n\n    return [\n      '[' +\n      displayVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n          .join(', ') +\n      ']'\n    ];\n  }\n\n  // The array is rank 2 or more.\n  const subshape = shape.slice(1);\n  const substrides = strides.slice(1);\n  const stride = strides[0] * storagePerElement;\n  const lines: string[] = [];\n  if (size > FORMAT_LIMIT_NUM_VALS) {\n    for (let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.slice(start, end), subshape, dtype, substrides, padPerCol,\n          false /* isLast */));\n    }\n    lines.push('...');\n    for (let i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.slice(start, end), subshape, dtype, substrides, padPerCol,\n          i === size - 1 /* isLast */));\n    }\n  } else {\n    for (let i = 0; i < size; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.slice(start, end), subshape, dtype, substrides, padPerCol,\n          i === size - 1 /* isLast */));\n    }\n  }\n  const sep = rank === 2 ? ',' : '';\n  lines[0] = '[' + (size > 0 ? lines[0] + sep : '');\n  for (let i = 1; i < lines.length - 1; i++) {\n    lines[i] = ' ' + lines[i] + sep;\n  }\n  let newLineSep = ',\\n';\n  for (let i = 2; i < rank; i++) {\n    newLineSep += '\\n';\n  }\n  lines[lines.length - 1] =\n      ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);\n  return lines;\n}\n\nfunction createComplexTuples(vals: Array<{}>|\n                             TypedArray): Array<[number, number]> {\n  const complexTuples: Array<[number, number]> = [];\n  for (let i = 0; i < vals.length; i += 2) {\n    complexTuples.push([vals[i], vals[i + 1]] as [number, number]);\n  }\n  return complexTuples;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"@webgpu/types/dist\" />\n\nimport {getGlobal} from './global_util';\nimport {tensorToString} from './tensor_format';\nimport {DataId, TensorInfo} from './tensor_info';\nimport {ArrayMap, BackendValues, DataType, DataTypeMap, DataValues, NumericDataType, Rank, ShapeMap, SingleValueMap, TypedArray} from './types';\nimport * as util from './util';\nimport {computeStrides, toNestedArray} from './util';\n\nexport interface TensorData<D extends DataType> {\n  dataId?: DataId;\n  values?: DataTypeMap[D];\n}\n\n// This interface mimics KernelBackend (in backend.ts), which would create a\n// circular dependency if imported.\nexport interface Backend {}\n\n/**\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\n * at locations before converting to an immutable `tf.Tensor`.\n *\n * See `tf.buffer` for creating a tensor buffer.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class TensorBuffer<R extends Rank, D extends DataType = 'float32'> {\n  size: number;\n  shape: ShapeMap[R];\n  strides: number[];\n  values: DataTypeMap[D];\n\n  constructor(shape: ShapeMap[R], public dtype: D, values?: DataTypeMap[D]) {\n    this.shape = shape.slice() as ShapeMap[R];\n    this.size = util.sizeFromShape(shape);\n\n    if (values != null) {\n      const n = values.length;\n      util.assert(\n          n === this.size,\n          () => `Length of values '${n}' does not match the size ` +\n              `inferred by the shape '${this.size}'.`);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `complex64 dtype TensorBuffers are not supported. Please create ` +\n          `a TensorBuffer for the real and imaginary parts separately and ` +\n          `call tf.complex(real, imag).`);\n    }\n    this.values = values || util.getArrayFromDType(dtype, this.size);\n    this.strides = computeStrides(shape);\n  }\n\n  /**\n   * Sets a value in the buffer at a given location.\n   *\n   * @param value The value to set.\n   * @param locs  The location indices.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\n   */\n  set(value: SingleValueMap[D], ...locs: number[]): void {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n    util.assert(\n        locs.length === this.rank,\n        () => `The number of provided coordinates (${locs.length}) must ` +\n            `match the rank (${this.rank})`);\n\n    const index = this.locToIndex(locs);\n    this.values[index] = value as number;\n  }\n\n  /**\n   * Returns the value in the buffer at the provided location.\n   *\n   * @param locs The location indices.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\n   */\n  get(...locs: number[]): SingleValueMap[D] {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n    let i = 0;\n    for (const loc of locs) {\n      if (loc < 0 || loc >= this.shape[i]) {\n        const msg = `Requested out of range element at ${locs}. ` +\n            `  Buffer shape=${this.shape}`;\n        throw new Error(msg);\n      }\n      i++;\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n    return this.values[index] as SingleValueMap[D];\n  }\n\n  locToIndex(locs: number[]): number {\n    if (this.rank === 0) {\n      return 0;\n    } else if (this.rank === 1) {\n      return locs[0];\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n    return index;\n  }\n\n  indexToLoc(index: number): number[] {\n    if (this.rank === 0) {\n      return [];\n    } else if (this.rank === 1) {\n      return [index];\n    }\n    const locs: number[] = new Array(this.shape.length);\n    for (let i = 0; i < locs.length - 1; ++i) {\n      locs[i] = Math.floor(index / this.strides[i]);\n      index -= locs[i] * this.strides[i];\n    }\n    locs[locs.length - 1] = index;\n    return locs;\n  }\n\n  get rank() {\n    return this.shape.length;\n  }\n\n  /**\n   * Creates an immutable `tf.Tensor` object from the buffer.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\n   */\n  toTensor(): Tensor<R> {\n    return trackerFn().makeTensor(this.values, this.shape, this.dtype) as\n        Tensor<R>;\n  }\n}\n\nexport interface DataToGPUWebGLOption {\n  customTexShape?: [number, number];\n}\n\nexport type DataToGPUOptions = DataToGPUWebGLOption;\n\nexport interface GPUData {\n  tensorRef: Tensor;\n  texture?: WebGLTexture;\n  buffer?: GPUBuffer;\n  texShape?: [number, number];\n}\n\nexport interface TensorTracker {\n  makeTensor(\n      values: DataValues, shape: number[], dtype: DataType,\n      backend?: Backend): Tensor;\n  makeVariable(\n      initialValue: Tensor, trainable?: boolean, name?: string,\n      dtype?: DataType): Variable;\n  incRef(a: Tensor, backend: Backend): void;\n  disposeTensor(t: Tensor): void;\n  disposeVariable(v: Variable): void;\n  read(dataId: DataId): Promise<BackendValues>;\n  readSync(dataId: DataId): BackendValues;\n  readToGPU(dataId: DataId, options?: DataToGPUOptions): GPUData;\n}\n\n/**\n * The Tensor class calls into this handler to delegate chaining operations.\n */\nexport interface OpHandler {\n  cast<T extends Tensor>(x: T, dtype: DataType): T;\n  buffer<R extends Rank, D extends DataType>(\n      shape: ShapeMap[R], dtype: D,\n      values?: DataTypeMap[D]): TensorBuffer<R, D>;\n  print<T extends Tensor>(x: T, verbose: boolean): void;\n  clone<T extends Tensor>(x: T): T;\n  // TODO(yassogba) bring reshape back?\n}\n\n// For tracking tensor creation and disposal.\nlet trackerFn: () => TensorTracker = null;\n// Used by chaining methods to call into ops.\nlet opHandler: OpHandler = null;\n// Used to warn about deprecated methods.\nlet deprecationWarningFn: (msg: string) => void = null;\n// This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n[deprecationWarningFn];\n\n/**\n * An external consumer can register itself as the tensor tracker. This way\n * the Tensor class can notify the tracker for every tensor created and\n * disposed.\n */\nexport function setTensorTracker(fn: () => TensorTracker) {\n  trackerFn = fn;\n}\n\n/**\n * An external consumer can register itself as the op handler. This way the\n * Tensor class can have chaining methods that call into ops via the op\n * handler.\n */\nexport function setOpHandler(handler: OpHandler) {\n  opHandler = handler;\n}\n\n/**\n * Sets the deprecation warning function to be used by this file. This way the\n * Tensor class can be a leaf but still use the environment.\n */\nexport function setDeprecationWarningFn(fn: (msg: string) => void) {\n  deprecationWarningFn = fn;\n}\n\n// Declare this namespace to make Tensor class augmentation work in google3.\nexport declare namespace Tensor {}\n/**\n * A `tf.Tensor` object represents an immutable, multidimensional array of\n * numbers that has a shape and a data type.\n *\n * For performance reasons, functions that create tensors do not necessarily\n * perform a copy of the data passed to them (e.g. if the data is passed as a\n * `Float32Array`), and changes to the data will change the tensor. This is not\n * a feature and is not supported. To avoid this behavior, use the tensor before\n * changing the input data or create a copy with `copy = tf.add(yourTensor, 0)`.\n *\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Tensor<R extends Rank = Rank> implements TensorInfo {\n  /** Unique id of this tensor. */\n  readonly id: number;\n  /**\n   * Id of the bucket holding the data for this tensor. Multiple arrays can\n   * point to the same bucket (e.g. when calling array.reshape()).\n   */\n  dataId: DataId;\n  /** The shape of the tensor. */\n  readonly shape: ShapeMap[R];\n  /** Number of elements in the tensor. */\n  readonly size: number;\n  /** The data type for the array. */\n  readonly dtype: DataType;\n  /** The rank type for the array (see `Rank` enum). */\n  readonly rankType: R;\n\n  /** Whether this tensor has been globally kept. */\n  kept = false;\n  /** The id of the scope this tensor is being tracked in. */\n  scopeId: number;\n  /** The keras mask that some keras layers attach to the tensor */\n  kerasMask?: Tensor;\n\n  /**\n   * Number of elements to skip in each dimension when indexing. See\n   * https://docs.scipy.org/doc/numpy/reference/generated/\\\n   * numpy.ndarray.strides.html\n   */\n  readonly strides: number[];\n\n  constructor(shape: ShapeMap[R], dtype: DataType, dataId: DataId, id: number) {\n    this.shape = shape.slice() as ShapeMap[R];\n    this.dtype = dtype || 'float32';\n    this.size = util.sizeFromShape(shape);\n    this.strides = computeStrides(shape);\n    this.dataId = dataId;\n    this.id = id;\n    this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher') as R;\n  }\n\n  get rank(): number {\n    return this.shape.length;\n  }\n\n  /**\n   * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  async buffer<D extends DataType = 'float32'>(): Promise<TensorBuffer<R, D>> {\n    const vals = await this.data<D>();\n    return opHandler.buffer(this.shape, this.dtype as D, vals);\n  }\n\n  /**\n   * Returns a `tf.TensorBuffer` that holds the underlying data.\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  bufferSync<D extends DataType = 'float32'>(): TensorBuffer<R, D> {\n    return opHandler.buffer(this.shape, this.dtype as D, this.dataSync());\n  }\n\n  /**\n   * Returns the tensor data as a nested array. The transfer of data is done\n   * asynchronously.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  async array(): Promise<ArrayMap[R]> {\n    const vals = await this.data();\n    return toNestedArray(this.shape, vals, this.dtype === 'complex64') as\n        ArrayMap[R];\n  }\n\n  /**\n   * Returns the tensor data as a nested array. The transfer of data is done\n   * synchronously.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  arraySync(): ArrayMap[R] {\n    return toNestedArray(\n               this.shape, this.dataSync(), this.dtype === 'complex64') as\n        ArrayMap[R];\n  }\n\n  /**\n   * Asynchronously downloads the values from the `tf.Tensor`. Returns a\n   * promise of `TypedArray` that resolves when the computation has finished.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  async data<D extends DataType = NumericDataType>(): Promise<DataTypeMap[D]> {\n    this.throwIfDisposed();\n    const data = trackerFn().read(this.dataId);\n    if (this.dtype === 'string') {\n      const bytes = await data as Uint8Array[];\n      try {\n        return bytes.map(b => util.decodeString(b)) as DataTypeMap[D];\n      } catch {\n        throw new Error(\n            'Failed to decode the string bytes into utf-8. ' +\n            'To get the original bytes, call tensor.bytes().');\n      }\n    }\n    return data as Promise<DataTypeMap[D]>;\n  }\n\n  /**\n   * Copy the tensor's data to a new GPU resource. Comparing to the `dataSync()`\n   * and `data()`, this method prevents data from being downloaded to CPU.\n   *\n   * For WebGL backend, the data will be stored on a densely packed texture.\n   * This means that the texture will use the RGBA channels to store value.\n   *\n   * For WebGPU backend, the data will be stored on a buffer. There is no\n   * parameter, so can not use a user-defined size to create the buffer.\n   *\n   * @param options:\n   *     For WebGL,\n   *         - customTexShape: Optional. If set, will use the user defined\n   *     texture shape to create the texture.\n   *\n   * @returns For WebGL backend, a GPUData contains the new texture and\n   *     its information.\n   *     {\n   *        tensorRef: The tensor that is associated with this texture,\n   *        texture: WebGLTexture,\n   *        texShape: [number, number] // [height, width]\n   *     }\n   *\n   *     For WebGPU backend, a GPUData contains the new buffer.\n   *     {\n   *        tensorRef: The tensor that is associated with this buffer,\n   *        buffer: GPUBuffer,\n   *     }\n   *\n   *     Remember to dispose the GPUData after it is used by\n   *     `res.tensorRef.dispose()`.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  dataToGPU(options?: DataToGPUOptions): GPUData {\n    this.throwIfDisposed();\n    return trackerFn().readToGPU(this.dataId, options);\n  }\n\n  /**\n   * Synchronously downloads the values from the `tf.Tensor`. This blocks the\n   * UI thread until the values are ready, which can cause performance issues.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  dataSync<D extends DataType = NumericDataType>(): DataTypeMap[D] {\n    this.throwIfDisposed();\n    const data = trackerFn().readSync(this.dataId);\n    if (this.dtype === 'string') {\n      try {\n        return (data as Uint8Array[]).map(b => util.decodeString(b)) as\n            DataTypeMap[D];\n      } catch {\n        throw new Error(\n            'Failed to decode the string bytes into utf-8. ' +\n            'To get the original bytes, call tensor.bytes().');\n      }\n    }\n    return data as DataTypeMap[D];\n  }\n\n  /** Returns the underlying bytes of the tensor's data. */\n  async bytes(): Promise<Uint8Array[]|Uint8Array> {\n    this.throwIfDisposed();\n    const data = await trackerFn().read(this.dataId);\n    if (this.dtype === 'string') {\n      return data as Uint8Array[];\n    } else {\n      return new Uint8Array((data as TypedArray).buffer);\n    }\n  }\n\n  /**\n   * Disposes `tf.Tensor` from memory.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    if (this.kerasMask) {\n      this.kerasMask.dispose();\n    }\n    trackerFn().disposeTensor(this);\n    this.isDisposedInternal = true;\n  }\n\n  protected isDisposedInternal = false;\n  get isDisposed(): boolean {\n    return this.isDisposedInternal;\n  }\n\n  throwIfDisposed() {\n    if (this.isDisposed) {\n      throw new Error(`Tensor is disposed.`);\n    }\n  }\n\n  /**\n   * Prints the `tf.Tensor`. See `tf.print` for details.\n   *\n   * @param verbose Whether to print verbose information about the tensor,\n   *    including dtype and size.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  print(verbose = false): void {\n    return opHandler.print(this, verbose);\n  }\n\n  /**\n   * Returns a copy of the tensor. See `tf.clone` for details.\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  clone<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.clone(this);\n  }\n\n  /**\n   * Returns a human-readable description of the tensor. Useful for logging.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  toString(verbose = false): string {\n    const vals = this.dataSync();\n    return tensorToString(vals, this.shape, this.dtype, verbose);\n  }\n\n  cast<T extends this>(dtype: DataType): T {\n    this.throwIfDisposed();\n    return opHandler.cast(this as T, dtype);\n  }\n  variable(trainable = true, name?: string, dtype?: DataType): Variable<R> {\n    this.throwIfDisposed();\n    return trackerFn().makeVariable(this, trainable, name, dtype) as\n        Variable<R>;\n  }\n}\n\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n  value: (instance: Tensor) => {\n    // Implementation note: we should use properties of the object that will be\n    // defined before the constructor body has finished executing (methods).\n    // This is because when this code is transpiled by babel, babel will call\n    // classCallCheck before the constructor body is run.\n    // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.\n    return !!instance && instance.data != null && instance.dataSync != null &&\n        instance.throwIfDisposed != null;\n  }\n});\n\nexport function getGlobalTensorClass() {\n  // Use getGlobal so that we can augment the Tensor class across package\n  // boundaries becase the node resolution alg may result in different modules\n  // being returned for this file depending on the path they are loaded from.\n  return getGlobal('Tensor', () => {\n    return Tensor;\n  });\n}\n\n// Global side effect. Cache global reference to Tensor class\ngetGlobalTensorClass();\n\nexport interface NumericTensor<R extends Rank = Rank> extends Tensor<R> {\n  dtype: NumericDataType;\n  dataSync<D extends DataType = NumericDataType>(): DataTypeMap[D];\n  data<D extends DataType = NumericDataType>(): Promise<DataTypeMap[D]>;\n  dataToGPU(options?: DataToGPUOptions): GPUData;\n}\n\nexport interface StringTensor<R extends Rank = Rank> extends Tensor<R> {\n  dtype: 'string';\n  dataSync<D extends DataType = 'string'>(): DataTypeMap[D];\n  data<D extends DataType = 'string'>(): Promise<DataTypeMap[D]>;\n}\n\n/** @doclink Tensor */\nexport type Scalar = Tensor<Rank.R0>;\n/** @doclink Tensor */\nexport type Tensor1D = Tensor<Rank.R1>;\n/** @doclink Tensor */\nexport type Tensor2D = Tensor<Rank.R2>;\n/** @doclink Tensor */\nexport type Tensor3D = Tensor<Rank.R3>;\n/** @doclink Tensor */\nexport type Tensor4D = Tensor<Rank.R4>;\n/** @doclink Tensor */\nexport type Tensor5D = Tensor<Rank.R5>;\n/** @doclink Tensor */\nexport type Tensor6D = Tensor<Rank.R6>;\n\n/**\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Variable<R extends Rank = Rank> extends Tensor<R> {\n  name: string;\n\n  constructor(\n      initialValue: Tensor<R>, public trainable: boolean, name: string,\n      tensorId: number) {\n    super(\n        initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n    this.name = name;\n  }\n\n  /**\n   * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\n   * the same shape and dtype as the old `tf.Tensor`.\n   *\n   * @param newValue New tensor to be assigned to this variable.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  assign(newValue: Tensor<R>): void {\n    if (newValue.dtype !== this.dtype) {\n      throw new Error(\n          `dtype of the new value (${newValue.dtype}) and ` +\n          `previous value (${this.dtype}) must match`);\n    }\n    if (!util.arraysEqual(newValue.shape, this.shape)) {\n      throw new Error(\n          `shape of the new value (${newValue.shape}) and ` +\n          `previous value (${this.shape}) must match`);\n    }\n    trackerFn().disposeTensor(this);\n    this.dataId = newValue.dataId;\n    trackerFn().incRef(this, null /* backend */);\n  }\n\n  override dispose(): void {\n    trackerFn().disposeVariable(this);\n    this.isDisposedInternal = true;\n  }\n}\n\nObject.defineProperty(Variable, Symbol.hasInstance, {\n  value: (instance: Variable) => {\n    return instance instanceof Tensor && instance.assign != null &&\n        instance.assign instanceof Function;\n  }\n});\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from './tensor';\nimport {TensorContainer, TensorContainerArray} from './tensor_types';\nimport {upcastType} from './types';\nimport {assert} from './util';\n\nexport function makeTypesMatch<T extends Tensor>(a: T, b: T): [T, T] {\n  if (a.dtype === b.dtype) {\n    return [a, b];\n  }\n  const dtype = upcastType(a.dtype, b.dtype);\n  return [a.cast(dtype), b.cast(dtype)];\n}\n\nexport function assertTypesMatch(a: Tensor, b: Tensor): void {\n  assert(\n      a.dtype === b.dtype,\n      () => `The dtypes of the first(${a.dtype}) and` +\n          ` second(${b.dtype}) input must match`);\n}\n\nexport function isTensorInList(tensor: Tensor, tensorList: Tensor[]): boolean {\n  return tensorList.some(x => x.id === tensor.id);\n}\n\n/**\n * Extracts any `Tensor`s found within the provided object.\n *\n * @param container an object that may be a `Tensor` or may directly contain\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it\n *   is safe to pass any object here, except that `Promise`s are not\n *   supported.\n * @returns An array of `Tensors` found within the passed object. If the\n *   argument is simply a `Tensor', a list containing that `Tensor` is\n *   returned. If the object is not a `Tensor` or does not\n *   contain `Tensors`, an empty list is returned.\n */\nexport function getTensorsInContainer(result: TensorContainer): Tensor[] {\n  const list: Tensor[] = [];\n  const seen = new Set<{}|void>();\n  walkTensorContainer(result, list, seen);\n  return list;\n}\n\nfunction walkTensorContainer(\n    container: TensorContainer, list: Tensor[], seen: Set<{}|void>): void {\n  if (container == null) {\n    return;\n  }\n  if (container instanceof Tensor) {\n    list.push(container);\n    return;\n  }\n  if (!isIterable(container)) {\n    return;\n  }\n  // Iteration over keys works also for arrays.\n  const iterable = container as TensorContainerArray;\n  for (const k in iterable) {\n    const val = iterable[k];\n    if (!seen.has(val)) {\n      seen.add(val);\n      walkTensorContainer(val, list, seen);\n    }\n  }\n}\n\n// tslint:disable-next-line:no-any\nfunction isIterable(obj: any): boolean {\n  return Array.isArray(obj) || typeof obj === 'object';\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** @docalias number[] */\nexport interface ShapeMap {\n  R0: number[];\n  R1: [number];\n  R2: [number, number];\n  R3: [number, number, number];\n  R4: [number, number, number, number];\n  R5: [number, number, number, number, number];\n  R6: [number, number, number, number, number, number];\n}\n\n/** @docalias number[] */\nexport interface ArrayMap {\n  R0: number;\n  R1: number[];\n  R2: number[][];\n  R3: number[][][];\n  R4: number[][][][];\n  R5: number[][][][][];\n  R6: number[][][][][][];\n}\n\nexport interface DataTypeMap {\n  float32: Float32Array;\n  int32: Int32Array;\n  bool: Uint8Array;\n  complex64: Float32Array;\n  string: string[];\n}\n\nexport interface SingleValueMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  complex64: number;\n  string: string;\n}\n\n/** @docalias 'float32'|'int32'|'bool'|'complex64'|'string' */\nexport type DataType = keyof DataTypeMap;\nexport type NumericDataType = 'float32'|'int32'|'bool'|'complex64';\n\nexport type DataTypeFor<T extends number|string|boolean> =\n    T extends number|boolean ? NumericDataType : T extends string ? 'string' :\n                                                                    never;\n\nexport type TypedArray = Float32Array|Int32Array|Uint8Array;\n/** Tensor data used in tensor creation and user-facing API. */\nexport type DataValues = DataTypeMap[DataType];\n/** The underlying tensor data that gets stored in a backend. */\nexport type BackendValues = Float32Array|Int32Array|Uint8Array|Uint8Array[];\n\nexport enum Rank {\n  R0 = 'R0',\n  R1 = 'R1',\n  R2 = 'R2',\n  R3 = 'R3',\n  R4 = 'R4',\n  R5 = 'R5',\n  R6 = 'R6'\n}\n\nexport type FlatVector = boolean[]|number[]|TypedArray;\nexport type RegularArray<T> =\n    T[]|T[][]|T[][][]|T[][][][]|T[][][][][]|T[][][][][][];\n\n// tslint:disable-next-line:no-any\nexport interface RecursiveArray<T extends any> {\n  [index: number]: T|RecursiveArray<T>;\n}\n\n// Looks for upcasting types. Used, for example, in operations with mixed dtype\n// inputs.\nenum UpcastInt32AndMap {\n  'float32' = 'float32',\n  'int32' = 'int32',\n  'bool' = 'int32',\n  'complex64' = 'complex64'\n}\n\nenum UpcastBoolAndMap {\n  'float32' = 'float32',\n  'int32' = 'int32',\n  'bool' = 'bool',\n  'complex64' = 'complex64'\n}\n\nenum UpcastFloat32AndMap {\n  'float32' = 'float32',\n  'int32' = 'float32',\n  'bool' = 'float32',\n  'complex64' = 'complex64'\n}\n\nenum UpcastComplex64AndMap {\n  'float32' = 'complex64',\n  'int32' = 'complex64',\n  'bool' = 'complex64',\n  'complex64' = 'complex64'\n}\n\nconst upcastTypeMap = {\n  'float32': UpcastFloat32AndMap,\n  'int32': UpcastInt32AndMap,\n  'bool': UpcastBoolAndMap,\n  'complex64': UpcastComplex64AndMap\n};\n\nexport function upcastType(typeA: DataType, typeB: DataType): DataType {\n  if (typeA === 'string' || typeB === 'string') {\n    if (typeA === 'string' && typeB === 'string') {\n      return 'string';\n    }\n    throw new Error(`Can not upcast ${typeA} with ${typeB}`);\n  }\n  return upcastTypeMap[typeA][typeB];\n}\n\n/** Returns the output type after summation. */\nexport function sumOutType(type: DataType): DataType {\n  return upcastType(type, 'int32');\n}\n\n/** @docalias TypedArray|Array */\nexport type TensorLike =\n    TypedArray|number|boolean|string|RecursiveArray<number|number[]|TypedArray>|\n    RecursiveArray<boolean>|RecursiveArray<string>|Uint8Array[];\nexport type ScalarLike = number|boolean|string|Uint8Array;\n/** @docalias TypedArray|Array */\nexport type TensorLike1D = TypedArray|number[]|boolean[]|string[]|Uint8Array[];\n/** @docalias TypedArray|Array */\nexport type TensorLike2D = TypedArray|number[]|number[][]|boolean[]|boolean[][]|\n    string[]|string[][]|Uint8Array[]|Uint8Array[][];\n/** @docalias TypedArray|Array */\nexport type TensorLike3D = TypedArray|number[]|number[][][]|boolean[]|\n    boolean[][][]|string[]|string[][][]|Uint8Array[]|Uint8Array[][][];\n/** @docalias TypedArray|Array */\nexport type TensorLike4D = TypedArray|number[]|number[][][][]|boolean[]|\n    boolean[][][][]|string[]|string[][][][]|Uint8Array[]|Uint8Array[][][][];\n/** @docalias TypedArray|Array */\nexport type TensorLike5D =\n    TypedArray|number[]|number[][][][][]|boolean[]|boolean[][][][][]|string[]|\n    string[][][][][]|Uint8Array[]|Uint8Array[][][][][];\n/** @docalias TypedArray|Array */\nexport type TensorLike6D =\n    TypedArray|number[]|number[][][][][][]|boolean[]|boolean[][][][][][]|\n    string[]|string[][][][][][]|Uint8Array[]|Uint8Array[][][][][];\n\n/** Type for representing image data in Uint8Array type. */\nexport interface PixelData {\n  width: number;\n  height: number;\n  data: Uint8Array;\n}\n\n/**\n * Type for representing all permutations and combinations of 'RGBA' channels.\n */\nexport type WebGLChannels = 'A'|'B'|'G'|'R'|'AB'|'AG'|'AR'|'BA'|'BG'|'BR'|'GA'|\n    'GB'|'GR'|'RA'|'RB'|'RG'|'ABG'|'ABR'|'AGB'|'AGR'|'ARB'|'ARG'|'BAG'|'BAR'|\n    'BGA'|'BGR'|'BRA'|'BRG'|'GAB'|'GAR'|'GBA'|'GBR'|'GRA'|'GRB'|'RAB'|'RAG'|\n    'RBA'|'RBG'|'RGA'|'RGB'|'ABGR'|'ABRG'|'AGBR'|'AGRB'|'ARBG'|'ARGB'|'BAGR'|\n    'BARG'|'BGAR'|'BGRA'|'BRAG'|'BRGA'|'GABR'|'GARB'|'GBAR'|'GBRA'|'GRAB'|\n    'GRBA'|'RABG'|'RAGB'|'RBAG'|'RBGA'|'RGAB'|'RGBA';\n\n/** Type for representing a texture data to create a tensor. */\nexport interface WebGLData {\n  texture: WebGLTexture;\n  height: number;\n  width: number;\n  channels: WebGLChannels;\n}\n\n/**\n * Type for representing a buffer data to create a tensor. Buffer usage should\n * at least support GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC. When\n * zeroCopy is false or undefined (default), this GPUBuffer will be copied to\n * the tensor's resource buffer. When zeroCopy is true, tensor will use this\n * GPUBuffer as tensor's resource buffer, user should not destroy this GPUBuffer\n * until all access is done. If not specified at creating a tensor, tensor type\n * is float32.\n */\nexport interface WebGPUData {\n  buffer: GPUBuffer;\n  zeroCopy?: boolean;\n}\n\nexport function isWebGLData(values: unknown): values is WebGLData {\n  return values != null && typeof values === 'object' && 'texture' in values &&\n      values.texture instanceof WebGLTexture;\n}\nexport function isWebGPUData(values: unknown): values is WebGPUData {\n  return typeof GPUBuffer !== 'undefined' && values != null &&\n      typeof values === 'object' && 'buffer' in values &&\n      values.buffer instanceof GPUBuffer;\n}\n\nexport interface ImageOptions {\n  /**\n   * Optional. A number in range [0-1]. If the image is a 2D tensor or a 3D\n   * tensor with 1 or 3 channels, the alpha channels would set as its value;\n   * otherwise, it would not make effects.\n   */\n  alpha?: number;\n}\n\nexport interface ContextOptions {\n  /**\n   * Optional.  If the canvas has created a context, it would not make effects.\n   * If it is not set, it would be variable based on the current backend.\n   */\n  contextType?: string;\n  /**\n   * Optional. A WebGLContextAttributes configuration. If the canvas has created\n   * a context, it would not make effects.\n   */\n  contextAttributes?: WebGLContextAttributes;\n}\n\nexport interface DrawOptions {\n  /**\n   * Optional. An object of options to customize the values of image tensor.\n   */\n  imageOptions?: ImageOptions;\n  /**\n   * Optional. An object to configure the context of the canvas to draw to.\n   */\n  contextOptions?: ContextOptions;\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendTimingInfo, DataMover, KernelBackend} from './backends/backend';\nimport {Environment, setEnvironmentGlobal} from './environment';\nimport {getGlobalNamespace} from './global_util';\nimport {Add, Cast, Identity} from './kernel_names';\nimport { getGradient, getKernel, getKernelsForBackend, GradFunc, NamedAttrMap } from './kernel_registry';\nimport { TensorInfo } from './tensor_info';\nimport * as log from './log';\nimport {KernelProfile, Profiler} from './profiler';\nimport {backpropagateGradients, getFilteredNodesXToY, TapeNode} from './tape';\nimport {DataToGPUOptions, GPUData, setTensorTracker, Tensor, TensorTracker, Variable} from './tensor';\nimport {DataId} from './tensor_info';\nimport {GradSaveFunc, NamedTensorMap, NamedVariableMap, TensorContainer} from './tensor_types';\nimport {getTensorsInContainer} from './tensor_util';\nimport {BackendValues, DataType, DataValues} from './types';\nimport * as util from './util';\nimport {bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape} from './util';\n\n/**\n * A function that computes an output. The save function is for saving tensors\n * computed in the forward pass, that we need in the backward pass.\n */\nexport type ForwardFunc<T> = (backend: KernelBackend, save?: GradSaveFunc) => T;\n\n/**\n * @docalias (a: Tensor, b: Tensor,..., save?: Function) => {\n *   value: Tensor,\n *   gradFunc: (dy: Tensor, saved?: NamedTensorMap) => Tensor | Tensor[]\n * }\n */\nexport type CustomGradientFunc<T extends Tensor> =\n    (...inputs: Array<Tensor|GradSaveFunc>) => {\n      value: T;\n      gradFunc: (dy: T, saved: Tensor[]) => Tensor | Tensor[];\n    };\n\nexport type MemoryInfo = {\n  numTensors: number; numDataBuffers: number; numBytes: number;\n  unreliable?: boolean; reasons: string[];\n};\n\ntype KernelInfo = {\n  name: string; bytesAdded: number; totalBytesSnapshot: number;\n  tensorsAdded: number;\n  totalTensorsSnapshot: number;\n  inputShapes: number[][];\n  outputShapes: number[][];\n  kernelTimeMs: number | {error: string} | Promise<number|{error: string}>;\n  extraInfo: string | Promise<string>;\n};\n\nexport type ProfileInfo = {\n  newBytes: number; newTensors: number; peakBytes: number;\n  kernels: KernelInfo[];\n  result: TensorContainer;\n  kernelNames: string[];\n};\n\nexport interface TimingInfo extends BackendTimingInfo {\n  wallMs: number;\n}\n\n/** @docalias Function */\nexport type ScopeFn<T extends TensorContainer> = () => T;\n\ninterface ScopeState {\n  track: Tensor[];\n  name: string;\n  id: number;\n}\n\ninterface RegisteredKernelInvocation<I extends NamedTensorMap> {\n  kernelName: string;\n  inputs: I;\n  attrs?: NamedAttrMap;\n}\n\ninterface CustomGradKernelInvocation<T extends Tensor|Tensor[],\n                                               I extends NamedTensorMap> {\n  forwardFunc: ForwardFunc<T>;\n  backwardsFunc: (dy: T, saved: Tensor[]) => {\n    [P in keyof I]: () => I[P]\n  };\n  inputs: I;\n  attrs?: NamedAttrMap;\n}\n\nfunction isRegisteredKernelInvocation<T extends Tensor|Tensor[],\n                                                I extends NamedTensorMap>(\n    kernelInvocation: RegisteredKernelInvocation<I>|\n    CustomGradKernelInvocation<T, I>):\n    kernelInvocation is RegisteredKernelInvocation<I> {\n  return (kernelInvocation as RegisteredKernelInvocation<I>).kernelName != null;\n}\n\nclass EngineState {\n  // Public since optimizers will use it.\n  registeredVariables: NamedVariableMap = {};\n\n  nextTapeNodeId = 0;\n  numBytes = 0;\n  numTensors = 0;\n  numStringTensors = 0;\n  numDataBuffers = 0;\n\n  activeTape: TapeNode[];\n  // Number of nested tf.grad() statements when computing higher-order\n  // gradients. E.g. `1` for first-order gradients and `2` for second-order\n  // gradients. Used to track if the tape should be removed after a backprop.\n  gradientDepth = 0;\n  // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n  // off the tape.\n  kernelDepth = 0;\n\n  // Keep Tensors that parallel the tapes.\n  activeScope: ScopeState;\n  scopeStack: ScopeState[] = [];\n  /**\n   * Keeps track of the number of data moves during a kernel execution. We\n   * maintain a stack since kernels can call other kernels, recursively.\n   */\n  numDataMovesStack: number[] = [];\n  nextScopeId = 0;\n\n  tensorInfo = new WeakMap<DataId, {\n    backend: KernelBackend,\n    bytes: number,\n    dtype: DataType,\n    shape: number[]\n  }>();\n\n  profiling = false;\n  activeProfile: ProfileInfo = {\n    newBytes: 0,\n    newTensors: 0,\n    peakBytes: 0,\n    kernels: [],\n    result: null,\n    get kernelNames():\n        string[] {\n          return Array.from(new Set(this.kernels.map(k => k.name)));\n        }\n  };\n\n  dispose() {\n    for (const variableName in this.registeredVariables) {\n      this.registeredVariables[variableName].dispose();\n    }\n  }\n}\n\nexport class Engine implements TensorTracker, DataMover {\n  state: EngineState;\n  backendName: string;\n  registry: {[id: string]: KernelBackend} = {};\n  registryFactory: {\n    [id: string]: {\n      factory: () => KernelBackend | Promise<KernelBackend>,\n      priority: number\n    }\n  } = {};\n\n  private profiler: Profiler;\n  private backendInstance: KernelBackend;\n  private pendingBackendInit: Promise<boolean>;\n  private pendingBackendInitId = 0;\n\n  constructor(public ENV: Environment) {\n    this.state = new EngineState();\n  }\n\n  async ready(): Promise<void> {\n    if (this.pendingBackendInit != null) {\n      return this.pendingBackendInit.then(() => {});\n    }\n    if (this.backendInstance != null) {\n      return;\n    }\n    const sortedBackends = this.getSortedBackends();\n\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const success = await this.initializeBackend(backendName).success;\n      if (success) {\n        await this.setBackend(backendName);\n        return;\n      }\n    }\n\n    throw new Error(\n        `Could not initialize any backends, all backend initializations ` +\n        `failed.`);\n  }\n\n  get backend(): KernelBackend {\n    if (this.pendingBackendInit != null) {\n      throw new Error(\n          `Backend '${this.backendName}' has not yet been initialized. Make ` +\n          `sure to await tf.ready() or await tf.setBackend() before calling ` +\n          `other methods`);\n    }\n    if (this.backendInstance == null) {\n      const {name, asyncInit} = this.initializeBackendsAndReturnBest();\n      if (asyncInit) {\n        throw new Error(\n            `The highest priority backend '${name}' has not yet been ` +\n            `initialized. Make sure to await tf.ready() or ` +\n            `await tf.setBackend() before calling other methods`);\n      }\n      this.setBackend(name);\n    }\n    return this.backendInstance;\n  }\n\n  backendNames(): string[] {\n    return Object.keys(this.registryFactory);\n  }\n\n  findBackend(backendName: string): KernelBackend {\n    if (!(backendName in this.registry)) {\n      // If the backend hasn't been initialized but we have a registry entry for\n      // it, initialize it and return it.\n      if (backendName in this.registryFactory) {\n        const {asyncInit} = this.initializeBackend(backendName);\n        if (asyncInit) {\n          // Backend is not ready yet.\n          return null;\n        }\n      } else {\n        return null;\n      }\n    }\n    return this.registry[backendName];\n  }\n\n  findBackendFactory(backendName: string):\n      () => KernelBackend | Promise<KernelBackend> {\n    if (!(backendName in this.registryFactory)) {\n      return null;\n    }\n    return this.registryFactory[backendName].factory;\n  }\n\n  registerBackend(\n      backendName: string,\n      factory: () => KernelBackend | Promise<KernelBackend>,\n      priority = 1): boolean {\n    if (backendName in this.registryFactory) {\n      log.warn(\n          `${backendName} backend was already registered. ` +\n          `Reusing existing backend factory.`);\n      return false;\n    }\n    this.registryFactory[backendName] = {factory, priority};\n    return true;\n  }\n\n  async setBackend(backendName: string): Promise<boolean> {\n    if (this.registryFactory[backendName] == null) {\n      throw new Error(`Backend name '${backendName}' not found in registry`);\n    }\n    this.backendName = backendName;\n    if (this.registry[backendName] == null) {\n      this.backendInstance = null;\n      const {success, asyncInit} = this.initializeBackend(backendName);\n      const result = asyncInit ? await success : success;\n      if (!result) {\n        return false;\n      }\n    }\n    this.backendInstance = this.registry[backendName];\n    this.setupRegisteredKernels();\n    // Reset the profiler.\n    this.profiler = new Profiler(this.backendInstance);\n\n    return true;\n  }\n\n  private setupRegisteredKernels(): void {\n    const kernels = getKernelsForBackend(this.backendName);\n    kernels.forEach(kernel => {\n      if (kernel.setupFunc != null) {\n        kernel.setupFunc(this.backendInstance);\n      }\n    });\n  }\n\n  private disposeRegisteredKernels(backendName: string): void {\n    const kernels = getKernelsForBackend(backendName);\n    kernels.forEach(kernel => {\n      if (kernel.disposeFunc != null) {\n        kernel.disposeFunc(this.registry[backendName]);\n      }\n    });\n  }\n\n  /**\n   * Initializes a backend by looking up the backend name in the factory\n   * registry and calling the factory method. Returns a boolean representing\n   * whether the initialization of the backend suceeded. Throws an error if\n   * there is no backend in the factory registry.\n   */\n  private initializeBackend(backendName: string):\n      {success: boolean|Promise<boolean>, asyncInit: boolean} {\n    const registryFactoryEntry = this.registryFactory[backendName];\n    if (registryFactoryEntry == null) {\n      throw new Error(\n          `Cannot initialize backend ${backendName}, no registration found.`);\n    }\n\n    try {\n      const backend = registryFactoryEntry.factory();\n      /* Test if the factory returns a promise.\n      Done in a more liberal way than\n      previous 'Promise.resolve(backend)===backend'\n      as we needed to account for custom Promise\n      implementations (e.g. Angular) */\n      if (backend && !(backend instanceof KernelBackend) &&\n          typeof backend.then === 'function') {\n        const promiseId = ++this.pendingBackendInitId;\n        const success =\n            backend\n                .then(backendInstance => {\n                  // Outdated promise. Another backend was set in the meantime.\n                  if (promiseId < this.pendingBackendInitId) {\n                    return false;\n                  }\n                  this.registry[backendName] = backendInstance;\n                  this.pendingBackendInit = null;\n                  return true;\n                })\n                .catch(err => {\n                  // Outdated promise. Another backend was set in the meantime.\n                  if (promiseId < this.pendingBackendInitId) {\n                    return false;\n                  }\n                  this.pendingBackendInit = null;\n                  log.warn(`Initialization of backend ${backendName} failed`);\n                  log.warn(err.stack || err.message);\n                  return false;\n                });\n        this.pendingBackendInit = success;\n        return {success, asyncInit: true};\n      } else {\n        this.registry[backendName] = backend as KernelBackend;\n        return {success: true, asyncInit: false};\n      }\n    } catch (err) {\n      log.warn(`Initialization of backend ${backendName} failed`);\n      log.warn(err.stack || err.message);\n      return {success: false, asyncInit: false};\n    }\n  }\n\n  removeBackend(backendName: string): void {\n    if (!(backendName in this.registryFactory)) {\n      throw new Error(`${backendName} backend not found in registry`);\n    }\n    if (this.backendName === backendName && this.pendingBackendInit != null) {\n      // There is a pending promise of the backend we want to remove. Make it\n      // obsolete.\n      this.pendingBackendInitId++;\n    }\n\n    if (backendName in this.registry) {\n      this.disposeRegisteredKernels(backendName);\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n\n    delete this.registryFactory[backendName];\n\n    // Unset the backend if it is active.\n    if (this.backendName === backendName) {\n      this.pendingBackendInit = null;\n      this.backendName = null;\n      this.backendInstance = null;\n    }\n  }\n\n  private getSortedBackends(): string[] {\n    if (Object.keys(this.registryFactory).length === 0) {\n      throw new Error('No backend found in registry.');\n    }\n    return Object.keys(this.registryFactory).sort((a: string, b: string) => {\n      // Highest priority comes first.\n      return this.registryFactory[b].priority -\n          this.registryFactory[a].priority;\n    });\n  }\n\n  private initializeBackendsAndReturnBest():\n      {name: string, asyncInit: boolean} {\n    const sortedBackends = this.getSortedBackends();\n\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const {success, asyncInit} = this.initializeBackend(backendName);\n      if (asyncInit || success) {\n        return {name: backendName, asyncInit};\n      }\n    }\n    throw new Error(\n        `Could not initialize any backends, all backend initializations ` +\n        `failed.`);\n  }\n\n  moveData(backend: KernelBackend, dataId: DataId) {\n    const info = this.state.tensorInfo.get(dataId);\n    const srcBackend = info.backend;\n    const values = this.readSync(dataId);\n    const refCount = srcBackend.refCount(dataId);\n    // Delete the tensor from the old backend and move it to the new\n    // backend.\n    srcBackend.disposeData(dataId, true);\n    info.backend = backend;\n    backend.move(dataId, values, info.shape, info.dtype, refCount);\n    if (this.shouldCheckForMemLeaks()) {\n      // Track the number of moves during a kernel execution to correctly\n      // detect memory leaks.\n      this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n    }\n  }\n\n  tidy<T extends TensorContainer>(nameOrFn: string|ScopeFn<T>, fn?: ScopeFn<T>):\n      T {\n    let name: string = null;\n    if (fn == null) {\n      // Called with only 1 argument.\n      if (typeof nameOrFn !== 'function') {\n        throw new Error('Please provide a function to tidy()');\n      }\n      fn = nameOrFn;\n    } else {\n      // Called with 2 arguments.\n      if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n        throw new Error(\n            'When calling with two arguments, the first argument ' +\n            'to tidy() must be a string');\n      }\n      if (typeof fn !== 'function') {\n        throw new Error(\n            'When calling with two arguments, the 2nd argument ' +\n            'to tidy() must be a function');\n      }\n      name = nameOrFn as string;\n      // TODO(nsthorat,smilkov): Do operation logging and performance\n      // profiling.\n    }\n    let result: T;\n    return this.scopedRun(\n        () => this.startScope(name), () => this.endScope(result), () => {\n          result = fn();\n          if (result instanceof Promise) {\n            console.error('Cannot return a Promise inside of tidy.');\n          }\n          return result;\n        });\n  }\n\n  private scopedRun<T>(start: () => void, end: () => void, f: () => T): T {\n    start();\n    try {\n      const res = f();\n      end();\n      return res;\n    } catch (ex) {\n      end();\n      throw ex;\n    }\n  }\n\n  private static nextTensorId = 0;\n  private nextTensorId(): number {\n    return Engine.nextTensorId++;\n  }\n\n  private static nextVariableId = 0;\n  private nextVariableId(): number {\n    return Engine.nextVariableId++;\n  }\n\n  /**\n   * This method is called instead of the public-facing tensor.clone() when\n   * saving a tensor for backwards pass. It makes sure to add the clone\n   * operation to the tape regardless of being called inside a kernel\n   * execution.\n   */\n  private clone(x: Tensor): Tensor {\n    const y: Tensor = ENGINE.runKernel(Identity,\n                                       {x} as unknown as NamedTensorMap);\n    const inputs = {x};\n    const grad = (dy: Tensor) => ({\n      x: () => {\n        const dtype = 'float32';\n        const gradInputs = {x: dy};\n        const attrs = {dtype};\n\n        return ENGINE.runKernel(\n                   Cast, gradInputs as unknown as NamedTensorMap,\n                   // tslint:disable-next-line: no-unnecessary-type-assertion\n                   attrs as unknown as NamedAttrMap) as Tensor;\n      }\n    });\n    const saved: Tensor[] = [];\n    this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});\n    return y;\n  }\n\n  /**\n   * Execute a kernel with the given name and return the output tensor.\n   *\n   * @param kernelName The name of the kernel to execute.\n   * @param inputs A map of input names to tensors.\n   * @param attrs A map of attribute names to their values. An attribute is a\n   *     primitive (non-tensor) input to the kernel.\n   * @param inputsToSave A list of tensors, inputs to save for the backprop\n   *     computation.\n   * @param outputsToSave A list of booleans, specifying which output to save\n   *     for the backprop computation. These are booleans since the output\n   * tensors are not visible to the user.\n   */\n  runKernel<T extends Tensor|Tensor[]>(\n      kernelName: string, inputs: NamedTensorMap, attrs?: NamedAttrMap): T {\n    if (this.backendName == null) {\n      // backend has not been initialized yet (backend initialization is lazy\n      // can be deferred until an op/ kernel is run).\n      // The below getter has side effects that will try to initialize the\n      // backend and set properties like this.backendName\n      // tslint:disable-next-line: no-unused-expression\n      this.backend;\n    }\n    const hasKernel = getKernel(kernelName, this.backendName) != null;\n    if (!hasKernel) {\n      throw new Error(`Kernel '${kernelName}' not registered for backend '${\n          this.backendName}'`);\n    }\n    return this.runKernelFunc({kernelName, inputs, attrs});\n  }\n\n  private shouldCheckForMemLeaks(): boolean {\n    return this.ENV.getBool('IS_TEST');\n  }\n\n  private checkKernelForMemLeak(\n      kernelName: string, numDataIdsBefore: number,\n      outInfos: TensorInfo[]): void {\n    const numDataIdsAfter = this.backend.numDataIds();\n\n    // Count the number of data ids associated with the result of the kernel.\n    let numOutputDataIds = 0;\n    outInfos.forEach(info => {\n      // Complex numbers allocate 3 data ids, one for 'real', one for\n      // 'imaginary', and one for the container that holds the former two.\n      numOutputDataIds += (info.dtype === 'complex64' ? 3 : 1);\n    });\n\n    // Account for the number of moves during kernel execution. A \"data move\"\n    // can happen in the middle of a kernel execution, placing a new (key,value)\n    // pair in the data storage. Since data moves have net zero effect (we\n    // always remove the data from the old backend), we have to cancel them out\n    // when detecting memory leaks.\n    const numMoves =\n        this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n    const dataIdsLeaked =\n        numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n    if (dataIdsLeaked > 0) {\n      throw new Error(\n          `Backend '${this.backendName}' has an internal memory leak ` +\n          `(${dataIdsLeaked} data ids) after running '${kernelName}'`);\n    }\n  }\n\n  /**\n   * Internal helper method to execute a kernel Func\n   *\n   * Use `runKernel` to execute kernels from outside of engine.\n   */\n  private runKernelFunc<T extends Tensor|Tensor[], I extends NamedTensorMap>(\n      kernelParams: RegisteredKernelInvocation<I>|\n      CustomGradKernelInvocation<T, I>): T {\n    let outputs: Tensor[];\n    let saved: Tensor[] = [];\n    const isTapeOn = this.isTapeOn();\n\n    const startingBytecount = this.state.numBytes;\n    const startingNumTensors = this.state.numTensors;\n\n    if (this.shouldCheckForMemLeaks()) {\n      this.state.numDataMovesStack.push(0);\n    }\n\n    let kernelFunc: () => Tensor[];\n    if (this.backendName == null) {\n      // backend has not been initialized yet (backend initialization is lazy\n      // can be deferred until an op/ kernel is run).\n      // The below getter has side effects that will try to initialize the\n      // backend and set properties like this.backendName\n      // tslint:disable-next-line: no-unused-expression\n      this.backend;\n    }\n\n    let out: TensorInfo|TensorInfo[];\n\n    const kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ?\n        kernelParams.kernelName :\n        this.state.activeScope != null ? this.state.activeScope.name : '';\n\n    // Create the kernelFunc from either a registered kernel OR passed in\n    // forward/backward functions (used by custom grad). In this context a\n    // kernelFunc wraps a kernel implementation with some bookkeeping.\n\n    if (isRegisteredKernelInvocation(kernelParams)) {\n      const {kernelName, inputs, attrs} = kernelParams;\n      if (this.backendName == null) {\n        // backend has not been initialized yet (backend initialization is lazy\n        // can be deferred until an op/ kernel is run).\n        // The below getter has side effects that will try to initialize the\n        // backend and set properties like this.backendName\n        // tslint:disable-next-line: no-unused-expression\n        this.backend;\n      }\n      const kernel = getKernel(kernelName, this.backendName);\n      util.assert(\n          kernel != null,\n          () => `Cannot find registered kernel '${kernelName}' for backend '${\n              this.backendName}'`);\n\n      kernelFunc = () => {\n        const numDataIdsBefore = this.backend.numDataIds();\n        out = kernel.kernelFunc({inputs, attrs, backend: this.backend});\n        const outInfos = Array.isArray(out) ? out : [out];\n        if (this.shouldCheckForMemLeaks()) {\n          this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n        }\n\n        const outTensors = outInfos.map((outInfo: TensorInfo|Tensor) => {\n          // todo (yassogba) remove this option (Tensor) when node backend\n          // methods have been modularized and they all return tensorInfo.\n          // TensorInfos do not have a rank attribute.\n          if ((outInfo as Tensor).rank != null) {\n            return outInfo as Tensor;\n          }\n          return this.makeTensorFromTensorInfo(outInfo);\n        });\n\n        // Save any required inputs and outputs.\n\n        // Do not save unless we are recording to the tape. Otherwise it would\n        // cause a mem leak since there would be no backprop for these tensors\n        // (which would otherwise dispose them).\n        if (isTapeOn) {\n          const tensorsToSave =\n              this.getTensorsForGradient(kernelName, inputs, outTensors);\n          saved = this.saveTensorsForBackwardMode(tensorsToSave);\n        }\n        return outTensors;\n      };\n    } else {\n      const {forwardFunc} = kernelParams;\n      // Running a customGrad op.\n      const saveFunc: GradSaveFunc = (tensors) => {\n        // Do not save unless we are recording to the tape. Otherwise it would\n        // cause a mem leak since we would never run backprop, which disposes\n        // the kept tensors.\n        if (!isTapeOn) {\n          return;\n        }\n        saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n      };\n\n      kernelFunc = () => {\n        const numDataIdsBefore = this.backend.numDataIds();\n        out = this.tidy(() => forwardFunc(this.backend, saveFunc));\n        const outs = (Array.isArray(out) ? out : [out]) as Tensor[];\n        if (this.shouldCheckForMemLeaks()) {\n          // Scope name is used to print a more helpful error message if needed.\n          this.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);\n        }\n        return outs;\n      };\n    }\n\n    //\n    // Run the kernelFunc. Optionally profiling it.\n    //\n    const {inputs, attrs} = kernelParams;\n    const backwardsFunc = isRegisteredKernelInvocation(kernelParams) ?\n        null :\n        kernelParams.backwardsFunc;\n\n    let kernelProfile: KernelProfile;\n    this.scopedRun(\n        // Stop recording to a tape when running a kernel.\n        () => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {\n          if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {\n            outputs = kernelFunc();\n          } else {\n            kernelProfile = this.profiler.profileKernel(\n                kernelOrScopeName, inputs, () => kernelFunc());\n            if (this.ENV.getBool('DEBUG')) {\n              this.profiler.logKernelProfile(kernelProfile);\n            }\n            outputs = kernelProfile.outputs;\n          }\n        });\n\n    if (isTapeOn) {\n      this.addTapeNode(\n          kernelOrScopeName, inputs, outputs, backwardsFunc, saved, attrs);\n    }\n\n    if (this.state.profiling) {\n      this.state.activeProfile.kernels.push({\n        name: kernelOrScopeName,\n        bytesAdded: this.state.numBytes - startingBytecount,\n        totalBytesSnapshot: this.state.numBytes,\n        tensorsAdded: this.state.numTensors - startingNumTensors,\n        totalTensorsSnapshot: this.state.numTensors,\n        inputShapes: Object.keys(inputs).map(\n            key => inputs[key] != null ? inputs[key].shape : null),\n        outputShapes: outputs.map(item => item.shape),\n        kernelTimeMs: kernelProfile.timeMs,\n        extraInfo: kernelProfile.extraInfo\n      });\n    }\n    return (Array.isArray(out) ? outputs : outputs[0]) as T;\n  }\n\n  /**\n   * Saves tensors used in forward mode for use in backward mode.\n   *\n   * @param tensors the list of tensors to save.\n   */\n  private saveTensorsForBackwardMode(tensors: Tensor[]): Tensor[] {\n    const saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n    return saved;\n  }\n\n  /**\n   * Returns a list of tensors to save for a given gradient calculation.\n   *\n   * @param kernelName name of kernel to look up gradient for.\n   * @param inputs a map of input tensors.\n   * @param outputs an array of output tensors from forward mode of kernel.\n   */\n  private getTensorsForGradient(\n      kernelName: string, inputs: NamedTensorMap,\n      outputs: Tensor[]): Tensor[]|null {\n    const gradConfig = getGradient(kernelName);\n    if (gradConfig != null) {\n      const inputsToSave: string[] = gradConfig.inputsToSave || [];\n      const outputsToSave: boolean[] = gradConfig.outputsToSave || [];\n\n      // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs\n      // specified in inputsToSave will be saved.\n      let inputTensorsToSave: Tensor[];\n      if (gradConfig.saveAllInputs) {\n        util.assert(\n            Array.isArray(inputs),\n            () => 'saveAllInputs is true, expected inputs to be an array.');\n\n        inputTensorsToSave = Object.keys(inputs).map((key) => inputs[key]);\n      } else {\n        inputTensorsToSave = inputsToSave.map((inputName) => inputs[inputName]);\n      }\n\n      const outputTensorsToSave: Tensor[] =\n          outputs.filter((_, i) => outputsToSave[i]);\n\n      return inputTensorsToSave.concat(outputTensorsToSave);\n    }\n    // We return an empty list rather than throw an error because the kernel we\n    // are looking up may not actually be relevant to backproping through the\n    // overall function\n    //\n    // See 'does not error if irrelevant (pruned) ops are missing grads' test\n    // in gradients_test.ts for an example.\n    return [];\n  }\n\n  /**\n   * Internal method used by public APIs for tensor creation. Makes a new\n   * tensor with the provided shape, dtype and values. It always\n   * creates a new data id and writes the values to the underlying backend.\n   */\n  makeTensor(\n      values: DataValues, shape: number[], dtype: DataType,\n      backend?: KernelBackend): Tensor {\n    if (values == null) {\n      throw new Error('Values passed to engine.makeTensor() are null');\n    }\n    dtype = dtype || 'float32';\n    backend = backend || this.backend;\n    let backendVals = values as BackendValues;\n    if (dtype === 'string' && util.isString(values[0])) {\n      backendVals = (values as string[]).map(d => util.encodeString(d));\n    }\n    const dataId = backend.write(backendVals, shape, dtype);\n    const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n    this.trackTensor(t, backend);\n\n    // Count bytes for string tensors.\n    if (dtype === 'string') {\n      const info = this.state.tensorInfo.get(dataId);\n      const newBytes = bytesFromStringArray(backendVals as Uint8Array[]);\n      this.state.numBytes += newBytes - info.bytes;\n      info.bytes = newBytes;\n    }\n    return t;\n  }\n\n  /**\n   * Internal method used by backends. Makes a new tensor\n   * that is a wrapper around an existing data id. It doesn't create\n   * a new data id, only increments the ref count used in memory tracking.\n   * @deprecated\n   */\n  makeTensorFromDataId(\n    dataId: DataId, shape: number[], dtype: DataType,\n    backend?: KernelBackend): Tensor {\n    dtype = dtype || 'float32';\n    const tensorInfo: TensorInfo = {dataId, shape, dtype};\n    return this.makeTensorFromTensorInfo(tensorInfo, backend);\n  }\n\n  /**\n   * Internal method used by backends. Makes a new tensor that is a wrapper\n   * around an existing data id in TensorInfo. It doesn't create a new data id,\n   * only increments the ref count used in memory tracking.\n   */\n  makeTensorFromTensorInfo(tensorInfo: TensorInfo, backend?: KernelBackend):\n      Tensor {\n    const {dataId, shape, dtype} = tensorInfo;\n    const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n    this.trackTensor(t, backend);\n    return t;\n  }\n\n  makeVariable(\n      initialValue: Tensor, trainable = true, name?: string,\n      dtype?: DataType): Variable {\n    name = name || this.nextVariableId().toString();\n    if (dtype != null && dtype !== initialValue.dtype) {\n      initialValue = initialValue.cast(dtype);\n    }\n    const v = new Variable(initialValue, trainable, name, this.nextTensorId());\n    if (this.state.registeredVariables[v.name] != null) {\n      throw new Error(`Variable with name ${v.name} was already registered`);\n    }\n    this.state.registeredVariables[v.name] = v;\n    this.incRef(v, this.backend);\n    return v;\n  }\n\n  trackTensor(a: Tensor, backend: KernelBackend): void {\n    this.state.numTensors++;\n    if (a.dtype === 'string') {\n      this.state.numStringTensors++;\n    }\n    // Bytes for complex numbers are counted by their components. Bytes for\n    // string tensors are counted when writing values.\n    let bytes = 0;\n    if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n      bytes = a.size * util.bytesPerElement(a.dtype);\n    }\n    this.state.numBytes += bytes;\n\n    if (!this.state.tensorInfo.has(a.dataId)) {\n      this.state.numDataBuffers++;\n      this.state.tensorInfo.set(a.dataId, {\n        backend: backend || this.backend,\n        dtype: a.dtype,\n        shape: a.shape,\n        bytes\n      });\n    }\n\n    if (!(a instanceof Variable)) {\n      this.track(a);\n    }\n  }\n\n  // Track the tensor by dataId and increase the refCount for the dataId in the\n  // backend.\n  // TODO(pyu10055): This is currently used by makeVariable method, to increase\n  // refCount on the backend for the dataId. It can potentially be replaced with\n  // Identity op indead of calling backend directly.\n  incRef(a: Tensor, backend: KernelBackend): void {\n    this.trackTensor(a, backend);\n    this.backend.incRef(a.dataId);\n  }\n\n  removeDataId(dataId: DataId, backend: KernelBackend) {\n    if (this.state.tensorInfo.has(dataId) &&\n        this.state.tensorInfo.get(dataId).backend === backend) {\n      this.state.tensorInfo.delete(dataId);\n      this.state.numDataBuffers--;\n    }\n  }\n  disposeTensor(a: Tensor): void {\n    if (!this.state.tensorInfo.has(a.dataId)) {\n      return;\n    }\n    const info = this.state.tensorInfo.get(a.dataId);\n\n    this.state.numTensors--;\n    if (a.dtype === 'string') {\n      this.state.numStringTensors--;\n      this.state.numBytes -= info.bytes;\n    }\n    // Don't count bytes for complex numbers as they are counted by their\n    // components.\n    if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n      const bytes = a.size * util.bytesPerElement(a.dtype);\n      this.state.numBytes -= bytes;\n    }\n\n    // Remove the reference to dataId if backend dispose the data successfully\n    if (info.backend.disposeData(a.dataId)) {\n      this.removeDataId(a.dataId, info.backend);\n    }\n\n    // TODO(nsthorat): Construct an error and save the stack trace for\n    // debugging when in debug mode. Creating a stack trace is too expensive\n    // to do unconditionally.\n  }\n\n  disposeVariables(): void {\n    for (const varName in this.state.registeredVariables) {\n      const v = this.state.registeredVariables[varName];\n      this.disposeVariable(v);\n    }\n  }\n\n  disposeVariable(v: Variable): void {\n    this.disposeTensor(v);\n    if (this.state.registeredVariables[v.name] != null) {\n      delete this.state.registeredVariables[v.name];\n    }\n  }\n\n  memory(): MemoryInfo {\n    const info = this.backend.memory() as MemoryInfo;\n    info.numTensors = this.state.numTensors;\n    info.numDataBuffers = this.state.numDataBuffers;\n    info.numBytes = this.state.numBytes;\n    if (this.state.numStringTensors > 0) {\n      info.unreliable = true;\n      if (info.reasons == null) {\n        info.reasons = [];\n      }\n      info.reasons.push(\n          'Memory usage by string tensors is approximate ' +\n          '(2 bytes per character)');\n    }\n    return info;\n  }\n\n  async profile(query: () => (TensorContainer | Promise<TensorContainer>)):\n      Promise<ProfileInfo> {\n    this.state.profiling = true;\n\n    const startBytes = this.state.numBytes;\n    const startNumTensors = this.state.numTensors;\n\n    this.state.activeProfile.kernels = [];\n    this.state.activeProfile.result = await query();\n\n    this.state.profiling = false;\n\n    this.state.activeProfile.peakBytes = Math.max(\n        ...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));\n    this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n    this.state.activeProfile.newTensors =\n        this.state.numTensors - startNumTensors;\n    for (const kernel of this.state.activeProfile.kernels) {\n      kernel.kernelTimeMs = await kernel.kernelTimeMs;\n      kernel.extraInfo = await kernel.extraInfo;\n    }\n    return this.state.activeProfile;\n  }\n\n  isTapeOn(): boolean {\n    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n  }\n\n  private addTapeNode(\n      kernelName: string, inputs: NamedTensorMap, outputs: Tensor[],\n      gradientsFunc: GradFunc, saved: Tensor[], attrs: NamedAttrMap): void {\n    const tapeNode: TapeNode =\n        {id: this.state.nextTapeNodeId++, kernelName, inputs, outputs, saved};\n\n    const gradConfig = getGradient(kernelName);\n    if (gradConfig != null) {\n      gradientsFunc = gradConfig.gradFunc;\n    }\n    if (gradientsFunc != null) {\n      tapeNode.gradient = (dys: Tensor[]) => {\n        // TODO(smilkov): To optimize back-prop, pass dys that are not used in\n        // the backprop graph to the user as null instead of zeros\n        dys = dys.map((dy, i) => {\n          if (dy == null) {\n            const output = outputs[i];\n            const vals = util.makeZerosTypedArray(output.size, output.dtype);\n            return this.makeTensor(vals, output.shape, output.dtype);\n          }\n          return dy;\n        });\n        // Grad functions of ops with single outputs expect a dy, while ops\n        // with multiple outputs expect dys (array of dy).\n        return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);\n      };\n    }\n    this.state.activeTape.push(tapeNode);\n  }\n\n  keep<T extends Tensor>(result: T): T {\n    result.kept = true;\n    return result;\n  }\n\n  private startTape() {\n    if (this.state.gradientDepth === 0) {\n      this.state.activeTape = [];\n    }\n    this.state.gradientDepth++;\n  }\n\n  private endTape() {\n    this.state.gradientDepth--;\n  }\n\n  /**\n   * Start a scope. Use this with endScope() to achieve the same functionality\n   * as scope() without the need for a function closure.\n   */\n  startScope(name?: string) {\n    const scopeInfo: ScopeState = {\n      track: [],\n      name: 'unnamed scope',\n      id: this.state.nextScopeId++\n    };\n    if (name) {\n      scopeInfo.name = name;\n    }\n    this.state.scopeStack.push(scopeInfo);\n    this.state.activeScope = scopeInfo;\n  }\n\n  /**\n   * End a scope. Use this with startScope() to achieve the same functionality\n   * as scope() without the need for a function closure.\n   */\n  endScope(result?: TensorContainer) {\n    const tensorsToTrackInParent = getTensorsInContainer(result);\n    const tensorsToTrackInParentSet =\n        new Set(tensorsToTrackInParent.map(t => t.id));\n\n    // Dispose the arrays tracked in this scope.\n    for (let i = 0; i < this.state.activeScope.track.length; i++) {\n      const tensor = this.state.activeScope.track[i];\n      if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n        tensor.dispose();\n      }\n    }\n\n    const oldScope = this.state.scopeStack.pop();\n    this.state.activeScope = this.state.scopeStack.length === 0 ?\n        null :\n        this.state.scopeStack[this.state.scopeStack.length - 1];\n\n    // Track the current result in the parent scope.\n    tensorsToTrackInParent.forEach(tensor => {\n      // Only track the tensor if was allocated in the inner scope and is not\n      // globally kept.\n      if (!tensor.kept && tensor.scopeId === oldScope.id) {\n        this.track(tensor);\n      }\n    });\n  }\n\n  /**\n   * Returns gradients of `f` with respect to each of the `xs`. The gradients\n   * returned are of the same length as `xs`, but some might be null if `f`\n   * was not a function of that `x`. It also takes optional dy to multiply the\n   * gradient, which defaults to `1`.\n   */\n  gradients<T extends Tensor>(\n      f: () => T, xs: Tensor[], dy?: T,\n      allowNoGradients = false): {value: T, grads: Tensor[]} {\n    util.assert(\n        xs.length > 0, () => 'gradients() received an empty list of xs.');\n    if (dy != null && dy.dtype !== 'float32') {\n      throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);\n    }\n\n    const y = this.scopedRun(\n        () => this.startTape(), () => this.endTape(),\n        () => this.tidy('forward', f));\n\n    util.assert(\n        y instanceof Tensor,\n        () => 'The result y returned by f() must be a tensor.');\n    // Filter out the nodes that don't connect x => y.\n    const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n    if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n      throw new Error(\n          'Cannot compute gradient of y=f(x) with respect to x. Make sure ' +\n          'that the f you passed encloses all operations that lead from x ' +\n          'to y.');\n    }\n\n    return this.tidy('backward', () => {\n      const accumulatedGradientMap: {[tensorId: number]: Tensor} = {};\n      accumulatedGradientMap[y.id] = (dy == null) ? ones(y.shape) : dy;\n\n      // Backprop gradients through the filtered nodes.\n      backpropagateGradients(\n          accumulatedGradientMap, filteredTape,\n          // Pass the tidy function to avoid circular dep with `tape.ts`.\n          f => this.tidy(f as ScopeFn<Tensor>),\n          // Pass an add function to avoide a circular dep with `tape.ts`.\n          add);\n      const grads = xs.map(x => accumulatedGradientMap[x.id]);\n\n      if (this.state.gradientDepth === 0) {\n        // This means that we are not computing higher-order gradients\n        // and can clean up the tape.\n        this.state.activeTape.forEach(node => {\n          for (const tensor of node.saved) {\n            tensor.dispose();\n          }\n        });\n        this.state.activeTape = null;\n      }\n      return {value: y, grads};\n    });\n  }\n\n  customGrad<T extends Tensor>(f: CustomGradientFunc<T>):\n      (...args: Array<Tensor|GradSaveFunc>) => T {\n    util.assert(\n        util.isFunction(f),\n        () => 'The f passed in customGrad(f) must be a function.');\n    return (...inputs: Tensor[]): T => {\n      util.assert(\n          inputs.every(t => t instanceof Tensor),\n          () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' +\n              'tensors');\n\n      let res: {\n        value: T,\n        gradFunc: (dy: T, saved: Tensor[]) => Tensor | Tensor[],\n      };\n      const inputMap: NamedTensorMap = {};\n      inputs.forEach((input, i) => {\n        inputMap[i] = input;\n      });\n\n      const forwardFunc: ForwardFunc<T> = (_, save) => {\n        res = f(...[...inputs, save]);\n        util.assert(\n            res.value instanceof Tensor,\n            () => 'The function f passed in customGrad(f) must return an ' +\n                'object where `obj.value` is a tensor');\n        util.assert(\n            util.isFunction(res.gradFunc),\n            () => 'The function f passed in customGrad(f) must return an ' +\n                'object where `obj.gradFunc` is a function.');\n        return res.value;\n      };\n\n      const backwardsFunc = (dy: T, saved: Tensor[]) => {\n        const gradRes = res.gradFunc(dy, saved);\n        const grads: Tensor[] = Array.isArray(gradRes) ? gradRes : [gradRes];\n        util.assert(\n            grads.length === inputs.length,\n            () => 'The function f passed in customGrad(f) must return an ' +\n                'object where `obj.gradFunc` is a function that returns ' +\n                'the same number of tensors as inputs passed to f(...).');\n        util.assert(\n            grads.every(t => t instanceof Tensor),\n            () => 'The function f passed in customGrad(f) must return an ' +\n                'object where `obj.gradFunc` is a function that returns ' +\n                'a list of only tensors.');\n        const gradMap: {[key: string]: () => Tensor} = {};\n        grads.forEach((grad, i) => {\n          gradMap[i] = () => grad;\n        });\n        return gradMap;\n      };\n\n      return this.runKernelFunc({\n        forwardFunc,\n        backwardsFunc,\n        inputs: inputMap,\n      });\n    };\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.readSync(dataId);\n  }\n  read(dataId: DataId): Promise<BackendValues> {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.read(dataId);\n  }\n\n  readToGPU(dataId: DataId, options?: DataToGPUOptions): GPUData {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.readToGPU(dataId, options);\n  }\n\n  async time(query: () => void): Promise<TimingInfo> {\n    const start = now();\n    const timingInfo = await this.backend.time(query) as TimingInfo;\n    timingInfo.wallMs = now() - start;\n    return timingInfo;\n  }\n\n  /**\n   * Tracks a Tensor in the current scope to be automatically cleaned up\n   * when the current scope ends, and returns the value.\n   *\n   * @param result The Tensor to track in the current scope.\n   */\n  private track<T extends Tensor>(result: T): T {\n    if (this.state.activeScope != null) {\n      result.scopeId = this.state.activeScope.id;\n      this.state.activeScope.track.push(result);\n    }\n\n    return result;\n  }\n\n  get registeredVariables(): NamedVariableMap {\n    return this.state.registeredVariables;\n  }\n\n  /**\n   * Resets the engine state. Removes all backends but does not remove\n   * registered backend factories.\n   */\n  reset(): void {\n    // Make any pending promise obsolete.\n    this.pendingBackendInitId++;\n\n    this.state.dispose();\n    this.ENV.reset();\n    this.state = new EngineState();\n\n    for (const backendName in this.registry) {\n      this.disposeRegisteredKernels(backendName);\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n    this.backendName = null;\n    this.backendInstance = null;\n    this.pendingBackendInit = null;\n  }\n}\n\nfunction ones(shape: number[]): Tensor {\n  const values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n  return ENGINE.makeTensor(values, shape, 'float32');\n}\n\nexport function getOrMakeEngine(): Engine {\n  const ns = getGlobalNamespace() as unknown as {_tfengine: Engine};\n  if (ns._tfengine == null) {\n    const environment = new Environment(ns);\n    ns._tfengine = new Engine(environment);\n  }\n  setEnvironmentGlobal(ns._tfengine.ENV);\n\n  // Tell the current tensor interface that the global engine is responsible\n  // for tracking.\n  setTensorTracker(() => ns._tfengine);\n  return ns._tfengine;\n}\n\nexport const ENGINE = getOrMakeEngine();\n\n/**\n * A implementation of the add op for use within engine and tape.\n *\n * This allows us to avoid a circular dependency between add.ts and engine.\n * It is exported to be available in tape tests.\n */\nexport function add(a: Tensor, b: Tensor): Tensor {\n  // We duplicate Add here to avoid a circular dependency with add.ts.\n  const inputs = {a, b};\n  return ENGINE.runKernel(Add, inputs as unknown as NamedTensorMap);\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from './engine';\nimport {env} from './environment';\nimport {getGlobalTensorClass, Tensor} from './tensor';\nimport {DataType, isWebGLData, isWebGPUData, TensorLike, WebGLData, WebGPUData} from './types';\nimport {assert, flatten, inferDtype, isTypedArray, toTypedArray} from './util';\nimport {bytesPerElement} from './util_base';\n\nexport function inferShape(\n    val: TensorLike|WebGLData|WebGPUData, dtype?: DataType): number[] {\n  let firstElem: typeof val = val;\n\n  if (isTypedArray(val)) {\n    return dtype === 'string' ? [] : [val.length];\n  }\n\n  if (isWebGLData(val)) {\n    const usedChannels = val.channels || 'RGBA';\n    return [val.height, val.width * usedChannels.length];\n  } else if (isWebGPUData(val)) {\n    return [val.buffer.size / (dtype == null ? 4 : bytesPerElement(dtype))];\n  }\n  if (!Array.isArray(val)) {\n    return [];  // Scalar.\n  }\n  const shape: number[] = [];\n\n  while (Array.isArray(firstElem) ||\n         isTypedArray(firstElem) && dtype !== 'string') {\n    shape.push(firstElem.length);\n    firstElem = firstElem[0];\n  }\n  if (Array.isArray(val) &&\n      env().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')) {\n    deepAssertShapeConsistency(val, shape, []);\n  }\n\n  return shape;\n}\n\nfunction deepAssertShapeConsistency(\n    val: TensorLike, shape: number[], indices: number[]) {\n  indices = indices || [];\n  if (!(Array.isArray(val)) && !isTypedArray(val)) {\n    assert(\n        shape.length === 0,\n        () => `Element arr[${indices.join('][')}] is a primitive, ` +\n            `but should be an array/TypedArray of ${shape[0]} elements`);\n    return;\n  }\n  assert(\n      shape.length > 0,\n      () => `Element arr[${indices.join('][')}] should be a primitive, ` +\n          `but is an array of ${val.length} elements`);\n  assert(\n      val.length === shape[0],\n      () => `Element arr[${indices.join('][')}] should have ${shape[0]} ` +\n          `elements, but has ${val.length} elements`);\n  const subShape = shape.slice(1);\n  for (let i = 0; i < val.length; ++i) {\n    deepAssertShapeConsistency(val[i], subShape, indices.concat(i));\n  }\n}\n\nfunction assertDtype(\n    expectedDtype: DataType|'numeric'|'string_or_numeric',\n    actualDType: DataType, argName: string, functionName: string) {\n  if (expectedDtype === 'string_or_numeric') {\n    return;\n  }\n  if (expectedDtype == null) {\n    throw new Error(`Expected dtype cannot be null.`);\n  }\n  if (expectedDtype !== 'numeric' && expectedDtype !== actualDType ||\n      expectedDtype === 'numeric' && actualDType === 'string') {\n    throw new Error(\n        `Argument '${argName}' passed to '${functionName}' must ` +\n        `be ${expectedDtype} tensor, but got ${actualDType} tensor`);\n  }\n}\n\nexport function convertToTensor<T extends Tensor>(\n    x: T|TensorLike, argName: string, functionName: string,\n    parseAsDtype: DataType|'numeric'|'string_or_numeric' = 'numeric'): T {\n  if (x instanceof getGlobalTensorClass()) {\n    assertDtype(parseAsDtype, x.dtype, argName, functionName);\n    return x;\n  }\n  let inferredDtype = inferDtype(x);\n  // If the user expects a bool/int/float, use that info to update the\n  // inferredDtype when it is not a string.\n  if (inferredDtype !== 'string' &&\n      ['bool', 'int32', 'float32'].indexOf(parseAsDtype) >= 0) {\n    inferredDtype = parseAsDtype as DataType;\n  }\n  assertDtype(parseAsDtype, inferredDtype, argName, functionName);\n\n  if ((x == null) ||\n      (!isTypedArray(x) && !Array.isArray(x) && typeof x !== 'number' &&\n       typeof x !== 'boolean' && typeof x !== 'string')) {\n    const type = x == null ? 'null' : (x as {}).constructor.name;\n    throw new Error(\n        `Argument '${argName}' passed to '${functionName}' must be a ` +\n        `Tensor or TensorLike, but got '${type}'`);\n  }\n  const inferredShape = inferShape(x, inferredDtype);\n  if (!isTypedArray(x) && !Array.isArray(x)) {\n    x = [x] as number[];\n  }\n  const skipTypedArray = true;\n  const values = inferredDtype !== 'string' ?\n      toTypedArray(x, inferredDtype as DataType) :\n      flatten(x as string[], [], skipTypedArray) as string[];\n  return ENGINE.makeTensor(values, inferredShape, inferredDtype) as T;\n}\n\nexport function convertToTensorArray<T extends Tensor>(\n    arg: Array<T|TensorLike>, argName: string, functionName: string,\n    parseAsDtype: DataType|'numeric'|'string_or_numeric' = 'numeric'): T[] {\n  if (!Array.isArray(arg)) {\n    throw new Error(\n        `Argument ${argName} passed to ${functionName} must be a ` +\n        '`Tensor[]` or `TensorLike[]`');\n  }\n  const tensors = arg as T[];\n  return tensors.map(\n      (t, i) =>\n          convertToTensor(t, `${argName}[${i}]`, functionName, parseAsDtype));\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {isPromise} from '../util';\n\nexport const OP_SCOPE_SUFFIX = '__op';\n\n/**\n * Used for wrapping functions that perform math operations on\n * Tensors. The function will be wrapped in a named scope that cleans all\n * memory usage after the function is done.\n */\nexport function op<T extends Function>(f: {[name: string]: T}): T {\n  const keys = Object.keys(f);\n  if (keys.length !== 1) {\n    throw new Error(\n        `Please provide an object with a single key ` +\n        `(operation name) mapping to a function. Got an object with ` +\n        `${keys.length} keys.`);\n  }\n\n  let opName = keys[0];\n  const fn = f[opName];\n\n  // Strip the underscore from the end of the function name.\n  if (opName.endsWith('_')) {\n    opName = opName.substring(0, opName.length - 1);\n  }\n\n  // add an __op suffix to distinguish ops from kernels in tf.profile\n  opName = opName + OP_SCOPE_SUFFIX;\n\n  // tslint:disable-next-line:no-any\n  const f2 = (...args: any[]) => {\n    ENGINE.startScope(opName);\n    try {\n      const result = fn(...args);\n      if (isPromise(result)) {\n        console.error('Cannot return a Promise inside of tidy.');\n      }\n      ENGINE.endScope(result);\n      return result;\n    } catch (ex) {\n      ENGINE.endScope(null);\n      throw ex;\n    }\n  };\n  Object.defineProperty(f2, 'name', {value: opName, configurable: true});\n\n  // tslint:disable-next-line:no-any\n  return f2 as any as T;\n}\n", "/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Cast, CastAttrs, CastInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {DataType, TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Casts a `tf.Tensor` to a new dtype.\n *\n * ```js\n * const x = tf.tensor1d([1.5, 2.5, 3]);\n * tf.cast(x, 'int32').print();\n * ```\n * @param x The input tensor to be casted.\n * @param dtype The dtype to cast the input tensor to.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction cast_<T extends Tensor>(x: T|TensorLike, dtype: DataType): T {\n  const $x = convertToTensor(x, 'x', 'cast');\n\n  // Sanity checks.\n  if (!util.isValidDtype(dtype)) {\n    throw new Error(`Failed to cast to unknown dtype ${dtype}`);\n  }\n  if (dtype === 'string' && $x.dtype !== 'string' ||\n      dtype !== 'string' && $x.dtype === 'string') {\n    throw new Error('Only strings can be casted to strings');\n  }\n\n  const inputs: CastInputs = {x: $x};\n  const attrs: CastAttrs = {dtype};\n\n  return ENGINE.runKernel(\n      Cast, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const cast = /* @__PURE__ */ op({cast_});\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {isWebGLData, isWebGPUData, TensorLike, TypedArray, WebGLData, WebGPUData} from '../types';\nimport {DataType} from '../types';\nimport {assert, assertNonNegativeIntegerDimensions, flatten, inferDtype, isTypedArray, sizeFromShape, toTypedArray} from '../util';\n\n/** This is shared code across all tensor creation methods. */\nexport function makeTensor(\n    values: TensorLike|WebGLData|WebGPUData, shape: number[],\n    inferredShape: number[], dtype?: DataType): Tensor {\n  if (dtype == null) {\n    dtype = inferDtype(values);\n  } else if (dtype === 'complex64') {\n    throw new Error(\n        `Cannot construct a complex64 tensor directly. ` +\n        `Please use tf.complex(real, imag).`);\n  }\n\n  if (isWebGPUData(values) || isWebGLData(values)) {\n    if (dtype !== 'float32' && dtype !== 'int32') {\n      throw new Error(\n          `Creating tensor from GPU data only supports ` +\n          `'float32'|'int32' dtype, while the dtype is ${dtype}.`);\n    }\n    return ENGINE.backend.createTensorFromGPUData(\n        values, shape || inferredShape, dtype);\n  }\n\n  if (!isTypedArray(values) && !Array.isArray(values) &&\n      typeof values !== 'number' && typeof values !== 'boolean' &&\n      typeof values !== 'string') {\n    throw new Error(\n        'values passed to tensor(values) must be a number/boolean/string or ' +\n        'an array of numbers/booleans/strings, or a TypedArray');\n  }\n  // Verify that the shape matches the inferred shape.\n  if (shape != null) {\n    assertNonNegativeIntegerDimensions(shape);\n\n    const providedSize = sizeFromShape(shape);\n    const inferredSize = sizeFromShape(inferredShape);\n    assert(\n        providedSize === inferredSize,\n        () =>\n            `Based on the provided shape, [${shape}], the tensor should have ` +\n            `${providedSize} values but has ${inferredSize}`);\n\n    for (let i = 0; i < inferredShape.length; ++i) {\n      const inferred = inferredShape[i];\n      const flatDimsDontMatch = i === inferredShape.length - 1 ?\n          inferred !== sizeFromShape(shape.slice(i)) :\n          true;\n      assert(\n          inferredShape[i] === shape[i] || !flatDimsDontMatch,\n          () => `Error creating a new Tensor. Inferred shape ` +\n              `(${inferredShape}) does not match the provided ` +\n              `shape (${shape}). `);\n    }\n  }\n\n  if (!isTypedArray(values) && !Array.isArray(values)) {\n    values = [values] as number[];\n  }\n\n  shape = shape || inferredShape;\n  values = dtype !== 'string' ?\n      toTypedArray(values, dtype) :\n      flatten(values as string[], [], true) as string[];\n  return ENGINE.makeTensor(values as TypedArray, shape, dtype);\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor3D} from '../tensor';\nimport {inferShape} from '../tensor_util_env';\nimport {TensorLike3D} from '../types';\nimport {DataType} from '../types';\nimport {assertNonNull} from '../util';\nimport {makeTensor} from './tensor_ops_util';\n\n/**\n * Creates rank-3 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor3d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor3d([[[1], [2]], [[3], [4]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. If not provided,  it is inferred from\n *     `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor3d(\n    values: TensorLike3D, shape?: [number, number, number],\n    dtype?: DataType): Tensor3D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 3) {\n    throw new Error('tensor3d() requires shape to have three numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 3 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor3d() requires values to be number[][][] or flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor3d() requires shape to be provided when `values` ' +\n        'are a flat array');\n  }\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor3D;\n}\n"],
  "mappings": "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",
  "names": ["Long", "add", "sum", "global", "fetch", "fetch", "name", "add", "i", "Rank", "UpcastInt32AndMap", "UpcastBoolAndMap", "UpcastFloat32AndMap", "UpcastComplex64AndMap", "ENV", "inputs", "attrs", "f", "isPixelData"]
}
